// +build  csall json

// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package modification

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson42239ddeDecodeGithubComCorestoreioPkgConfigModification(in *jlexer.Lexer, out *Observers) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Collection":
			if in.IsNull() {
				in.Skip()
				out.Collection = nil
			} else {
				in.Delim('[')
				if out.Collection == nil {
					if !in.IsDelim(']') {
						out.Collection = make([]*Observer, 0, 8)
					} else {
						out.Collection = []*Observer{}
					}
				} else {
					out.Collection = (out.Collection)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Observer
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Observer)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Collection = append(out.Collection, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson42239ddeEncodeGithubComCorestoreioPkgConfigModification(out *jwriter.Writer, in Observers) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Collection) != 0 {
		const prefix string = ",\"Collection\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Collection {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Observers) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson42239ddeEncodeGithubComCorestoreioPkgConfigModification(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Observers) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson42239ddeEncodeGithubComCorestoreioPkgConfigModification(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Observers) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson42239ddeDecodeGithubComCorestoreioPkgConfigModification(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Observers) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson42239ddeDecodeGithubComCorestoreioPkgConfigModification(l, v)
}
func easyjson42239ddeDecodeGithubComCorestoreioPkgConfigModification1(in *jlexer.Lexer, out *Observer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "route":
			out.Route = string(in.String())
		case "event":
			out.Event = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "condition":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Condition).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson42239ddeEncodeGithubComCorestoreioPkgConfigModification1(out *jwriter.Writer, in Observer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Route != "" {
		const prefix string = ",\"route\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Route))
	}
	if in.Event != "" {
		const prefix string = ",\"event\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Event))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if len(in.Condition) != 0 {
		const prefix string = ",\"condition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Condition).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Observer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson42239ddeEncodeGithubComCorestoreioPkgConfigModification1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Observer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson42239ddeEncodeGithubComCorestoreioPkgConfigModification1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Observer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson42239ddeDecodeGithubComCorestoreioPkgConfigModification1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Observer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson42239ddeDecodeGithubComCorestoreioPkgConfigModification1(l, v)
}
