// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package json

import (
	json "encoding/json"

	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
)

func easyjson32b9832cDecodeGithubComCorestoreioPkgConfigValidationJson(in *jlexer.Lexer, out *Validators) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Validators, 0, 8)
			} else {
				*out = Validators{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 *Validator
			if in.IsNull() {
				in.Skip()
				v1 = nil
			} else {
				if v1 == nil {
					v1 = new(Validator)
				}
				(*v1).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson32b9832cEncodeGithubComCorestoreioPkgConfigValidationJson(out *jwriter.Writer, in Validators) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				(*v3).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Validators) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson32b9832cEncodeGithubComCorestoreioPkgConfigValidationJson(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Validators) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson32b9832cEncodeGithubComCorestoreioPkgConfigValidationJson(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Validators) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson32b9832cDecodeGithubComCorestoreioPkgConfigValidationJson(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Validators) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson32b9832cDecodeGithubComCorestoreioPkgConfigValidationJson(l, v)
}
func easyjson32b9832cDecodeGithubComCorestoreioPkgConfigValidationJson1(in *jlexer.Lexer, out *Validator) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "route":
			out.Route = string(in.String())
		case "event":
			out.Event = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "condition":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Condition).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson32b9832cEncodeGithubComCorestoreioPkgConfigValidationJson1(out *jwriter.Writer, in Validator) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Route != "" {
		const prefix string = ",\"route\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Route))
	}
	if in.Event != "" {
		const prefix string = ",\"event\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Event))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if len(in.Condition) != 0 {
		const prefix string = ",\"condition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Condition).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Validator) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson32b9832cEncodeGithubComCorestoreioPkgConfigValidationJson1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Validator) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson32b9832cEncodeGithubComCorestoreioPkgConfigValidationJson1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Validator) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson32b9832cDecodeGithubComCorestoreioPkgConfigValidationJson1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Validator) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson32b9832cDecodeGithubComCorestoreioPkgConfigValidationJson1(l, v)
}
