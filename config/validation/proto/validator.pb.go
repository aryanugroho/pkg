// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: validator.proto

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		validator.proto

	It has these top-level messages:
		Validators
		Validator
*/
package proto

import proto1 "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.GoGoProtoPackageIsVersion2 // please upgrade the proto package

func (m *Validators) Reset()                    { *m = Validators{} }
func (m *Validators) String() string            { return proto1.CompactTextString(m) }
func (*Validators) ProtoMessage()               {}
func (*Validators) Descriptor() ([]byte, []int) { return fileDescriptorValidator, []int{0} }

func (*Validators) XXX_MessageName() string {
	return "proto.Validators"
}
func (m *Validator) Reset()                    { *m = Validator{} }
func (m *Validator) String() string            { return proto1.CompactTextString(m) }
func (*Validator) ProtoMessage()               {}
func (*Validator) Descriptor() ([]byte, []int) { return fileDescriptorValidator, []int{1} }

func (*Validator) XXX_MessageName() string {
	return "proto.Validator"
}
func init() {
	proto1.RegisterType((*Validators)(nil), "proto.Validators")
	proto1.RegisterType((*Validator)(nil), "proto.Validator")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ConfigValidationService service

type ConfigValidationServiceClient interface {
	Register(ctx context.Context, in *Validators, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	Deregister(ctx context.Context, in *Validators, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type configValidationServiceClient struct {
	cc *grpc.ClientConn
}

func NewConfigValidationServiceClient(cc *grpc.ClientConn) ConfigValidationServiceClient {
	return &configValidationServiceClient{cc}
}

func (c *configValidationServiceClient) Register(ctx context.Context, in *Validators, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/proto.ConfigValidationService/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configValidationServiceClient) Deregister(ctx context.Context, in *Validators, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/proto.ConfigValidationService/Deregister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConfigValidationService service

type ConfigValidationServiceServer interface {
	Register(context.Context, *Validators) (*google_protobuf.Empty, error)
	Deregister(context.Context, *Validators) (*google_protobuf.Empty, error)
}

func RegisterConfigValidationServiceServer(s *grpc.Server, srv ConfigValidationServiceServer) {
	s.RegisterService(&_ConfigValidationService_serviceDesc, srv)
}

func _ConfigValidationService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Validators)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigValidationServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ConfigValidationService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigValidationServiceServer).Register(ctx, req.(*Validators))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigValidationService_Deregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Validators)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigValidationServiceServer).Deregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ConfigValidationService/Deregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigValidationServiceServer).Deregister(ctx, req.(*Validators))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfigValidationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ConfigValidationService",
	HandlerType: (*ConfigValidationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _ConfigValidationService_Register_Handler,
		},
		{
			MethodName: "Deregister",
			Handler:    _ConfigValidationService_Deregister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "validator.proto",
}

func (m *Validators) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validators) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Collection) > 0 {
		for _, msg := range m.Collection {
			dAtA[i] = 0xa
			i++
			i = encodeVarintValidator(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Route) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Route)))
		i += copy(dAtA[i:], m.Route)
	}
	if len(m.Event) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Event)))
		i += copy(dAtA[i:], m.Event)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Condition) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Condition)))
		i += copy(dAtA[i:], m.Condition)
	}
	return i, nil
}

func encodeVarintValidator(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Validators) Size() (n int) {
	var l int
	_ = l
	if len(m.Collection) > 0 {
		for _, e := range m.Collection {
			l = e.Size()
			n += 1 + l + sovValidator(uint64(l))
		}
	}
	return n
}

func (m *Validator) Size() (n int) {
	var l int
	_ = l
	l = len(m.Route)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.Condition)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	return n
}

func sovValidator(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozValidator(x uint64) (n int) {
	return sovValidator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Validators) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validators: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validators: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collection = append(m.Collection, &Validator{})
			if err := m.Collection[len(m.Collection)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Route = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Condition", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Condition = append(m.Condition[:0], dAtA[iNdEx:postIndex]...)
			if m.Condition == nil {
				m.Condition = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValidator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthValidator
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowValidator
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipValidator(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthValidator = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValidator   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("validator.proto", fileDescriptorValidator) }

var fileDescriptorValidator = []byte{
	// 327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0x86, 0x59, 0x01, 0x43, 0x47, 0x8d, 0xba, 0x07, 0x6d, 0xd0, 0xb4, 0x84, 0x13, 0x89, 0xb1,
	0x18, 0x3c, 0x18, 0x2f, 0x1e, 0x40, 0x5e, 0x60, 0x35, 0x1e, 0xbc, 0x41, 0x19, 0xd6, 0x4d, 0x4a,
	0xa7, 0x29, 0x0b, 0x09, 0x0f, 0xe1, 0xdd, 0xc7, 0xf0, 0x31, 0x38, 0xfa, 0x04, 0x44, 0xcb, 0x8b,
	0x98, 0xee, 0x0a, 0x35, 0x1e, 0x3d, 0x4d, 0xe7, 0x9b, 0xaf, 0xd9, 0xd9, 0x7f, 0xe1, 0x70, 0x3e,
	0x88, 0xd4, 0x68, 0xa0, 0x29, 0x0d, 0x92, 0x94, 0x34, 0xf1, 0xaa, 0x29, 0xf5, 0x33, 0x49, 0x24,
	0x23, 0x6c, 0x9b, 0x6e, 0x38, 0x1b, 0xb7, 0x71, 0x92, 0xe8, 0x85, 0x75, 0xea, 0x97, 0x52, 0xe9,
	0x97, 0xd9, 0x30, 0x08, 0x69, 0xd2, 0x96, 0x24, 0xa9, 0xb0, 0xf2, 0xce, 0x34, 0xe6, 0xcb, 0xea,
	0xcd, 0x3b, 0x80, 0xa7, 0xcd, 0x29, 0x53, 0x7e, 0x05, 0x10, 0x52, 0x14, 0x61, 0xa8, 0x15, 0xc5,
	0x2e, 0x6b, 0x94, 0x5b, 0x7b, 0x9d, 0x23, 0x6b, 0x06, 0x5b, 0x4d, 0xfc, 0x72, 0x9a, 0x6f, 0x0c,
	0x9c, 0xed, 0x84, 0xfb, 0x50, 0x4d, 0x69, 0xa6, 0xd1, 0x65, 0x0d, 0xd6, 0x72, 0xba, 0x4e, 0xb6,
	0xf2, 0xab, 0x22, 0x07, 0xc2, 0xf2, 0x5c, 0xc0, 0x39, 0xc6, 0xda, 0xdd, 0x29, 0x84, 0x7e, 0x0e,
	0x84, 0xe5, 0xfc, 0x1c, 0x2a, 0x7a, 0x91, 0xa0, 0x5b, 0x36, 0xf3, 0x5a, 0xb6, 0xf2, 0x2b, 0x8f,
	0x8b, 0x04, 0x85, 0xa1, 0xfc, 0x02, 0x9c, 0x90, 0xe2, 0x91, 0x32, 0xeb, 0x55, 0x1a, 0xac, 0xb5,
	0xdf, 0x3d, 0xc8, 0x56, 0xbe, 0xd3, 0xdb, 0x40, 0x51, 0xcc, 0x3b, 0xaf, 0x0c, 0x4e, 0x7b, 0x14,
	0x8f, 0x95, 0xfc, 0x59, 0x50, 0x51, 0xfc, 0x80, 0xe9, 0x5c, 0x85, 0xc8, 0x6f, 0xa0, 0x26, 0x50,
	0xaa, 0xa9, 0xc6, 0x94, 0x1f, 0xff, 0xbd, 0xe0, 0xb4, 0x7e, 0x12, 0xd8, 0x88, 0x83, 0x4d, 0x78,
	0x41, 0x3f, 0x8f, 0xb8, 0x59, 0xe2, 0xb7, 0x00, 0xf7, 0x98, 0xfe, 0xe7, 0xd7, 0xae, 0xbf, 0xfc,
	0xf2, 0x4a, 0xcb, 0xcc, 0x63, 0x1f, 0x99, 0xc7, 0x3e, 0x33, 0x8f, 0xbd, 0xaf, 0xbd, 0xd2, 0x72,
	0xed, 0xb1, 0x67, 0xfb, 0xae, 0xc3, 0x5d, 0x53, 0xae, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x14,
	0x04, 0x43, 0x2d, 0xf8, 0x01, 0x00, 0x00,
}
