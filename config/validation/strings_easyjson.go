// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package validation

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4837aca4DecodeGithubComCorestoreioPkgConfigValidation(in *jlexer.Lexer, out *Strings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "csv_comma":
			out.CSVComma = string(in.String())
		case "additional_allowed_values":
			if in.IsNull() {
				in.Skip()
				out.AdditionalAllowedValues = nil
			} else {
				in.Delim('[')
				if out.AdditionalAllowedValues == nil {
					if !in.IsDelim(']') {
						out.AdditionalAllowedValues = make([]string, 0, 4)
					} else {
						out.AdditionalAllowedValues = []string{}
					}
				} else {
					out.AdditionalAllowedValues = (out.AdditionalAllowedValues)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.AdditionalAllowedValues = append(out.AdditionalAllowedValues, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4837aca4EncodeGithubComCorestoreioPkgConfigValidation(out *jwriter.Writer, in Strings) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.CSVComma != "" {
		const prefix string = ",\"csv_comma\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CSVComma))
	}
	if len(in.AdditionalAllowedValues) != 0 {
		const prefix string = ",\"additional_allowed_values\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.AdditionalAllowedValues {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Strings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4837aca4EncodeGithubComCorestoreioPkgConfigValidation(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Strings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4837aca4EncodeGithubComCorestoreioPkgConfigValidation(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Strings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4837aca4DecodeGithubComCorestoreioPkgConfigValidation(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Strings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4837aca4DecodeGithubComCorestoreioPkgConfigValidation(l, v)
}
