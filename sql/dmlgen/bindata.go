// Code generated by go-bindata. DO NOT EDIT.
// sources:
// _tpl/10_tables.go.tpl
// _tpl/20_entity.go.tpl
// _tpl/30_collection_methods.go.tpl
// _tpl/40_binary.go.tpl
// _tpl/90_test.go.tpl
// _tpl/fbs_10_header.go.tpl
// _tpl/fbs_20_message.go.tpl
// _tpl/protobuf_10_header.go.tpl
// _tpl/protobuf_20_message.go.tpl

package dmlgen


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTpl10tablesgotpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x41\x8f\xd3\x30\x10\x85\xcf\xf6\xaf\x78\x54\x1c\x12\x64\xdc\x7b" +
	"\x51\x0e\x6c\x17\x71\x61\x17\x56\x8b\xc4\xd9\x4d\x26\xad\x45\x62\x57\x63\x17\x5a\x45\xfe\xef\x68\x92\x6a\xb7\xb7" +
	"\x95\x38\xc5\xf9\x3c\x7e\xf3\x66\x5e\x1b\x43\xca\xa8\xf4\x34\x7d\x04\xbb\xb0\x27\xbc\xcf\x6e\x37\x10\x36\x0d\xec" +
	"\x4f\x39\x25\x94\xa2\xd5\x7c\x7c\x74\x23\x4d\xd3\xd7\xb8\x75\x23\x0d\xd7\x6b\x61\xa5\xa0\xc1\x6a\x9a\x6e\xc9\x6a" +
	"\x96\xa4\xd0\x95\xa2\x6b\xad\xd7\x6b\x3c\xd2\xdf\xab\x20\x53\x3e\x71\x48\x70\xd8\x47\xdf\x7b\xea\xf0\x87\x38\xf9" +
	"\x18\x10\x7b\xe4\x03\xe1\xe1\xf2\xfc\xf4\x6d\xfd\xe0\xd8\xbb\xfb\x3b\x2c\x86\x52\x7b\xa0\xd1\xa1\x8f\x2c\x25\x22" +
	"\x38\xf3\xb4\xc1\x6d\xe3\x54\x8a\x5c\x7d\x3e\xe5\x88\x3d\x05\x62\x97\xa9\xc3\xee\x82\x6e\x1c\xf6\x14\xac\xee\x4f" +
	"\xa1\x7d\xb5\x52\xb5\xf9\x8c\x36\x86\x4c\xe7\x6c\xb7\xcb\xd7\xa0\xdb\x49\xb9\x7d\x3a\x11\x5f\xbe\x9c\xa9\xfd\xc1" +
	"\x74\x74\x4c\x6c\x10\x8f\x39\xc1\x5a\xdb\x75\xc3\xd2\xf3\xfb\x31\xfb\x18\x6a\x54\x79\xc4\x87\x17\x9a\x0c\x31\x83" +
	"\x98\x23\xd7\x98\xb4\xf2\x3d\xf2\x68\x04\xa0\x81\x54\xbd\x1a\xd0\x4a\x09\xf8\xe5\xf3\x61\xcb\xe4\x32\xcd\x5c\x7c" +
	"\x89\x0f\x83\xb7\x82\x51\x78\x23\x1a\x83\xd5\xca\x68\xa5\x5e\xe2\xa8\xcd\x4d\xcf\xfb\xbb\xaa\xdb\x09\xa9\x3f\xcd" +
	"\xf6\xde\x35\x08\x7e\x10\xcf\x6a\x49\x49\x7e\xcd\x32\x4a\x9a\x5f\x3c\x67\xd7\xfe\xae\x88\xb9\xd6\xaa\xcc\xa3\xc9" +
	"\xbb\x4d\x83\x3c\xda\x65\x1b\xa9\x92\x35\x59\x6b\xff\x57\xf3\x5a\x25\x2b\x0b\x7e\xd0\x45\xff\x0b\x00\x00\xff\xff" +
	"\x1c\x29\xb4\xc0\xa6\x02\x00\x00")

func bindataTpl10tablesgotplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTpl10tablesgotpl,
		"_tpl/10_tables.go.tpl",
	)
}



func bindataTpl10tablesgotpl() (*asset, error) {
	bytes, err := bindataTpl10tablesgotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "_tpl/10_tables.go.tpl",
		size: 678,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1547575483, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTpl20entitygotpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x5f\x73\xdb\xb8\x11\x7f\x26\x3f\xc5\x9e\xe6\xae\x25\x3d\x32\x94" +
	"\x87\xb6\x0f\xce\xf8\xc1\x67\x3b\xa9\xdb\xda\x97\x89\x7d\xd3\x07\x8f\xa7\x86\xc1\xa5\x84\x33\x08\x30\x00\x18\x45" +
	"\xc7\xe1\x77\xef\x2c\x48\x4a\xa2\x44\xff\x49\x3d\x9d\xcb\x4c\x94\x88\x20\xf6\xef\x6f\xf7\xb7\xab\xd9\x0c\xea\x9a" +
	"\x9d\x6b\x2f\xfd\xaa\x69\xc0\x62\x69\xd1\xa1\xf6\x0e\x38\x38\xa9\xe7\x0a\xc1\x9a\x25\xe4\xc6\xc2\xd9\xcf\xe0\xf9" +
	"\x83\x42\xb8\xaf\x6b\x76\x43\xff\xbb\xe2\x05\x36\xcd\x3d\x8b\x67\x33\x38\xa9\xbc\x81\x39\x6a\xb4\xdc\x63\xc6\xea" +
	"\x7a\x29\xfd\x02\xd8\xa9\x29\x0a\xd4\xbe\x69\xe2\xba\x66\x70\xd8\x34\x75\x8d\x3a\xa3\x7f\x0e\x41\xe6\xc0\xfe\xce" +
	"\xdd\x39\x77\xab\x7f\x38\xa3\x2f\xb9\x75\x0b\xae\xd0\x42\xd3\xc4\xb3\x19\x72\xb7\xfa\xcd\x19\x7d\x44\x1f\xdd\xad" +
	"\xd8\xaf\x4a\x1c\x18\xec\xbc\xad\x84\x87\x3a\xae\x6b\xcb\xf5\x1c\x49\xa3\xaa\x0a\xed\x48\xc5\x47\x73\xca\x0b\x54" +
	"\x97\x7c\xf5\x80\x9f\xac\xfc\xca\x3d\x02\xfb\x20\x51\x65\x4d\x03\x74\x7c\xb3\x2a\xf1\xaa\x52\x0a\x58\xd3\xc4\x51" +
	"\xd4\x19\xa5\x11\xd8\x75\x90\x7b\xc3\xe7\x30\x99\x90\xd9\xe4\xf3\xfa\x59\xf8\x7a\x08\xc1\x24\xb2\xe6\xa3\xd9\x76" +
	"\xb3\x7f\xdc\xd9\xf3\x19\x73\xb4\xa8\x05\x66\xa7\x46\x29\x14\x5e\x1a\xed\xa0\xbd\xb8\xf5\x7e\x13\x87\x28\x3a\x27" +
	"\xe7\xfa\x5f\xdc\xf9\x0b\xed\xd0\xfa\x8b\x33\xa8\xca\x8c\x7b\x74\xe0\x17\x08\x52\x0b\x8b\xa4\x08\x2e\xce\x20\x27" +
	"\x47\x20\x84\x99\xce\x14\x77\x1e\x64\xb8\x85\x19\x5c\x9c\x91\xb8\xdc\x9a\x02\xb8\x86\x8b\xab\xeb\xf3\xcf\x37\x60" +
	"\x4a\xca\x8e\x34\x9a\xc1\x45\x51\xaa\x20\xc9\x41\x56\x28\xd6\x6b\x6b\xf5\xa3\x65\xbb\xf9\x8c\xf3\x4a\x0b\x48\x10" +
	"\x0e\xb6\xa2\x9f\x8e\xd8\x9b\xc8\x0c\xa4\xf6\x7f\xfb\x4b\x0a\x75\x1c\x8d\x65\x45\xe6\xc0\x75\x06\xec\xc2\x7d\xfa" +
	"\x27\x7d\x92\xa6\x8b\xde\xb1\xa6\x01\x64\x2f\x64\xee\x78\x9d\x3b\xca\x5b\x22\xb3\x94\x14\x75\xb0\x42\x9d\x51\xbe" +
	"\xe2\x26\x8e\x29\x47\xfb\xea\x29\xc3\x17\x2e\xc8\x1a\x4a\x6e\x61\x07\xd7\xe8\xd7\xfa\x37\x3a\x1d\xfa\x36\x05\x19" +
	"\xf7\x3c\x94\x03\x87\xb2\xbb\x4e\xde\x38\x14\x95\x95\x7e\x05\x0e\xb5\x93\x5e\x7e\xc5\x10\x7f\xba\x3d\x88\xdd\x8f" +
	"\x5b\xc1\x1b\xd5\x94\x64\x7b\xc8\x4c\x87\x17\x29\xae\xaf\x88\x51\x16\x47\x16\x7d\x65\x35\x60\xdc\x82\xeb\xe3\xa8" +
	"\x67\xed\x4b\xdb\xce\x05\xd0\xbc\xd9\xbb\x51\x6d\x49\xba\xe7\x1d\xb9\xd3\x1b\xfa\x82\x57\x71\x57\x2e\xd0\x27\xba" +
	"\xcd\xd8\x25\x2f\xbb\xfc\x82\xdc\xc0\x5a\x6a\x8f\x36\xe7\x02\xa1\x3d\xbc\xe4\x65\x89\x16\x8c\x56\x2b\x28\xb9\xf5" +
	"\x92\x2b\xb5\x7a\x2d\xce\x37\x2a\x12\x51\xc0\x01\x95\xcc\x5a\x6a\x0a\x68\xad\xb1\xe4\x87\xcc\x41\x14\xec\xd2\x64" +
	"\x98\xa4\x70\x7c\x0c\x83\xf7\x5a\x69\x9f\x91\x67\x27\x4a\xd1\xdb\xbd\xdb\xa2\xd8\x2f\x93\x10\x89\x0f\x95\x16\x7d" +
	"\x98\x92\x3f\xbd\x14\x9d\xb4\xab\x01\x76\x6e\x6d\x92\xc6\x51\x13\x47\x84\x53\x51\xb0\x2b\xfc\xe6\x93\x50\x8f\x91" +
	"\x5b\x4a\x2f\x16\x20\xe0\xe8\x98\x4e\x5a\x7d\x49\xfa\x1e\x04\xd4\xb0\x6f\x46\x1c\x45\x91\xe0\x0e\x61\x52\xd7\xbd" +
	"\x9e\xc9\xfa\xb5\x13\x25\xb9\x43\xd7\x34\xd3\x49\x68\x66\x93\xce\x82\x23\xba\x16\x89\xe2\x0d\x4e\x90\x84\x0c\x73" +
	"\x5e\x29\xdf\x4a\xeb\x21\x42\xa1\x76\xec\xca\xf8\x0f\xa6\xd2\x19\xbb\xc2\x65\x9e\x4c\x6e\xeb\x9a\x7d\xe2\xe2\x91" +
	"\xcf\xb1\x69\xee\x06\x04\xd1\xba\x02\x3f\x7d\x01\x6d\x3c\xe4\x74\x69\x32\x05\x91\xc6\x11\x05\xa8\x89\x77\x04\xff" +
	"\x5b\xfa\xc5\xb5\xe7\xe2\x31\x11\x45\x1b\xc8\xb4\xab\x9e\xf3\xa2\xf4\x2b\xc0\xa2\xf4\x12\x1d\x70\xa5\x42\xc5\x84" +
	"\x1a\x70\x60\xf2\xf0\x4d\x54\xd6\x52\x77\x36\x0f\xbf\xa1\xf0\x0c\x4e\x94\x33\xf0\xa8\xcd\x52\x03\x77\xf0\x19\x1d" +
	"\xfa\xa7\x10\x16\xc4\x27\xe9\xe0\x29\xd4\x70\x80\xa1\xdd\xad\x1f\xd5\xcd\x7b\xe8\x2d\xee\x38\xa3\xae\xd9\x86\x59" +
	"\x76\x39\x5c\xac\x4f\x20\x70\xe7\x80\xc8\x87\x3c\x4e\xb2\xae\x8c\x07\xbf\xb0\xc8\x33\x70\x3c\xc7\xbd\xf2\xf8\x3f" +
	"\xd3\xfa\xc0\x8f\x35\xb5\x47\x67\xd4\x96\x36\x7f\xa2\xe8\xf6\x6e\x10\xa6\xfb\x20\x70\x42\xdd\x6b\x6a\x0a\xe9\x29" +
	"\x49\xab\xc9\x7d\x1c\xfd\x8c\xb9\xb1\xb8\x29\xde\x88\x62\x9f\x54\x81\x9f\xa6\x3b\x09\x68\x8b\xb8\x13\x75\x48\xb7" +
	"\x4f\x72\x8f\x76\xab\xb9\x7c\xd7\xed\x36\x37\x97\xfc\x11\x77\xfd\x12\x16\x03\xa1\x73\xd0\xb8\x04\xa9\x25\xb5\x22" +
	"\xf9\x3b\x66\x5b\xc9\x7a\xa2\x2f\x8d\x88\x0b\x1d\x75\xa8\x20\xf0\xee\xec\x20\x8e\xa2\x9b\x5f\xce\x7e\x49\x64\x86" +
	"\x3c\x3d\x82\xca\x21\x70\x98\x2b\xf3\xc0\x15\x94\xc6\x28\x58\x2e\x24\xb5\x02\xae\xc1\xe2\x5c\x3a\x8f\x36\xc0\x03" +
	"\xb9\x58\xb4\x60\xf1\x0b\x8c\xa3\xe8\x21\x04\x71\xc6\x29\x1a\x50\xf0\x52\xb4\x15\x45\x06\x05\x5c\x39\x03\x7e\xc1" +
	"\x7d\x4b\x20\xf8\x15\x32\x83\x2e\x14\x9b\x46\xcc\xc0\x1b\xe0\x61\x48\x88\xa3\xa8\x95\x2c\x0b\x64\xe0\x17\x52\x3f" +
	"\x12\x54\xa4\xff\xb3\x83\xa5\xb1\x7e\x01\xae\x12\x0b\x22\x1e\xee\x3d\x5a\xcd\xe2\xe8\x60\x16\xa8\xbc\x2f\xd1\x1d" +
	"\x3f\xa9\x9d\x11\x32\x8e\xa0\xe0\x8f\x98\x0c\x31\x31\x85\x77\x53\xf8\x6b\x3a\xa5\x12\x6f\xe2\xae\xe6\x84\x08\x59" +
	"\xdb\x16\x92\x82\x13\x5c\x3f\xd9\xdb\xa7\xc3\x32\x9d\x82\xcc\xbe\x41\xd5\xcd\x37\xdb\x6d\x1f\xad\x0d\x2d\x55\xb0" +
	"\x5d\xcc\x25\x32\xfb\x36\x05\x4c\xdf\x87\x77\x7e\x38\x06\x2d\x07\xdd\x7f\xaf\xf1\xa0\xb5\x6d\xf7\xde\x88\x45\x36" +
	"\x20\xa0\x37\xc9\x12\x82\xed\x00\xfb\x7f\xb7\xb0\x7b\x41\x4b\xb5\xc6\xfb\x18\x15\x0f\x42\x4a\x24\xbc\xe6\xe6\xa7" +
	"\xf8\x77\x34\x53\xaf\x24\xe1\x8e\xe2\x8a\x8e\xe2\x5a\x36\x7e\x0f\x05\x9d\x05\x2e\x7b\x9a\x95\xa7\x4f\x9d\x5d\x63" +
	"\xa0\x21\x2a\x0f\x39\x05\x24\xd1\x2d\x07\x0a\xc1\x42\x77\xa2\x70\x0d\x83\x3c\xc4\xd5\x14\x70\xda\x01\x27\x91\xe9" +
	"\x7e\xa8\x5f\x0a\x76\x60\x2b\xfa\xbb\xef\xc1\xb5\xe0\x9a\x8c\x6b\x87\x8f\x53\x53\x69\x4f\xb3\xc7\xbb\x56\x6e\x6f" +
	"\xe0\x71\x6f\xea\xed\xd1\xbb\xbb\x56\x54\x14\xfc\xd0\xb8\x4c\xb6\x5b\x59\xfc\xb2\x1f\xbd\x9a\x11\x37\x5e\xf0\x82" +
	"\xb4\x6e\x2c\x22\x30\xe8\x2c\xe9\x1e\x10\x04\xc7\xfc\xdb\x80\x60\x27\x13\xc3\xc9\xe6\xd9\xd1\x86\xce\xf7\xd7\x01" +
	"\xf6\xab\x96\x5f\x2a\xec\x11\x7b\xf8\xd6\x79\x07\x82\xe2\xdd\xa1\xc7\x91\x83\xfb\xa3\xb0\x4b\x52\xc6\x58\xda\x5b" +
	"\xb6\x9e\x7a\xa8\x75\xc3\x53\xb6\xca\x5c\x86\x3d\xb2\x9d\xce\xa2\x68\x36\x03\x6d\x80\x3a\x3c\xf5\xd2\xd0\x86\xa5" +
	"\x0b\x8d\x17\xb3\x3f\xd8\x17\x38\x98\xbd\x7d\x8c\x1b\xf0\xda\x33\xa3\x5c\x5f\x1d\x5b\xba\xf6\x34\x5d\x57\x65\x69" +
	"\x68\x39\x1e\xd7\xf6\xab\x6e\x07\x35\xea\x17\x47\xf0\xd3\x97\xc9\x94\x26\x10\xa9\xe7\x49\x91\x0e\xba\x5d\x3f\x18" +
	"\x86\x6d\xe4\x39\x40\xb5\x23\xd5\x48\xb4\xd6\x3b\x17\x07\xa7\xa4\x40\xa0\x75\x32\xd4\x82\x0b\x7c\xd9\x3d\xa5\x19" +
	"\xf3\x2b\x57\x15\xba\xb1\x5f\x58\x06\x9d\xf2\xc7\x9d\x56\x39\x96\x22\x8b\x1e\x18\x63\xfb\xdb\xe5\xed\xdd\xd8\x4e" +
	"\x26\x73\x32\x93\x3a\xc9\x16\x1d\xc0\x71\x4f\xb6\xbb\x57\x02\xe1\x2a\xd4\x7d\x35\xa7\x9b\x0d\xe4\x3f\x4f\x76\xcc" +
	"\x56\x62\xd7\x06\x2c\xfa\xe9\xf6\x0a\xb8\xd9\x09\xb6\xa3\x6f\xd1\xc7\x0d\xf4\x83\xe3\xc8\x8e\x3f\x56\x28\x4f\xe5" +
	"\xe1\x01\x95\xd1\xf3\x10\xf4\x30\xbe\xb7\x00\xbb\xdf\xd4\xcb\x3d\xdd\xa4\x0d\xf8\x75\x19\x0b\xcb\x65\x15\x30\xd0" +
	"\x65\xae\xdd\x0c\xb8\xef\x64\x87\x44\xde\x2c\xd6\xa7\x4b\xa9\x14\x3c\xd0\x1a\xa1\x3c\x5a\xcc\x5a\x66\xd4\xb4\x9a" +
	"\x82\xd4\xc0\xe1\xa3\xa1\x91\x8b\xc1\x95\xa1\xb1\xfd\x4b\x85\x76\x05\x73\xf4\x8e\xe4\xe0\x37\x14\x15\x41\xe1\xbb" +
	"\xa0\xd1\x42\xf4\x15\x00\xd9\x05\xc7\x77\x02\xe3\x19\x50\x6c\x4d\xa7\x47\xc0\xc1\x62\xe5\xc2\x3e\x52\xf0\x32\x04" +
	"\x9b\x46\xd5\x4c\xe6\xe1\x77\x33\x0f\x5c\xcd\x8d\x95\x7e\x51\x38\xc8\x90\x42\x2e\xf5\x1c\x68\x9f\x59\x20\x38\xf9" +
	"\x3b\x8d\xa8\xfd\xfa\xd5\x41\x2b\x24\x83\xc1\xb5\x29\x90\xa6\x4d\xca\x5a\x6e\xec\x8c\xb0\xa8\x8c\x29\xc1\x56\xda" +
	"\x41\xce\xc3\xc4\xeb\x17\x9c\xe2\x4c\x41\xa6\x81\x93\x5a\x56\x56\x95\xa7\x0b\x14\x8f\x84\xd9\xe0\x54\xc1\xcb\xdb" +
	"\x6d\xb7\xee\x1e\x8c\x51\x7b\x8e\x3d\x0f\x75\x99\xc3\x0f\xbd\xe0\xdb\x16\xe5\x9f\xac\x2c\xc2\x8f\x29\x7d\x0d\xdd" +
	"\xad\x39\x74\xb4\x2a\xf6\xde\x0f\x9d\xef\x65\xa1\xc7\xe0\x6d\x85\xbb\x0b\xef\xb0\x90\xfe\x1b\x00\x00\xff\xff\x76" +
	"\xde\x30\x73\x08\x16\x00\x00")

func bindataTpl20entitygotplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTpl20entitygotpl,
		"_tpl/20_entity.go.tpl",
	)
}



func bindataTpl20entitygotpl() (*asset, error) {
	bytes, err := bindataTpl20entitygotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "_tpl/20_entity.go.tpl",
		size: 5640,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1547669327, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTpl30collectionmethodsgotpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x95\x41\x8f\xa3\x38\x10\x85\xcf\xf0\x2b\xde\x61\xb5\x82\x6d\x42\xb6" +
	"\xaf\x99\xc9\x61\xb6\x67\x66\x35\xe7\xde\x3d\x45\xd1\xca\x31\x45\x70\x62\xec\xac\x31\x1d\x05\xc4\x7f\x1f\xd9\x40" +
	"\x42\x3a\x91\x46\xad\x48\x7d\x80\x2e\x5c\xf5\xea\x7b\x55\xce\x7c\x8e\xef\x42\x5a\x32\xff\x14\xa2\x42\xee\x1f\x2b" +
	"\xd8\x82\xc0\x6b\x63\x48\x59\x54\x52\x70\xc2\xe6\x84\x83\xa1\x4c\x70\x66\x09\x39\x8e\xc2\x16\xba\xb6\x28\xa9\xd4" +
	"\xe6\x04\x26\xa5\xe6\xcc\x0a\xad\xd2\x70\x3e\xc7\x97\xda\x6a\x6c\x49\x91\x61\x96\x32\xbc\x09\x86\xac\x94\x5b\x52" +
	"\x69\x98\xd7\x8a\x23\xe2\x1c\x7f\xb4\x6d\xfa\xa2\xa5\x24\xee\x8e\x75\x5d\x3c\xe8\x88\x72\xb8\x6f\x22\x17\xff\xa6" +
	"\xac\xb0\x27\x17\xdb\x68\x2d\xe3\x9b\x33\x68\xc3\x60\x83\xc5\x12\x9c\xa7\x5f\x99\x65\xab\xc5\x9f\xeb\x30\xc8\xb5" +
	"\xc1\x7f\x09\xc8\x05\x0c\x53\x5b\x1a\xc3\xee\xf3\x40\xe4\xc8\x23\x8a\xfd\x73\xb0\xc1\x12\xec\x70\x20\x95\x45\x9b" +
	"\x04\x14\x87\x41\xd0\x85\xee\x6f\x3c\xb1\xc4\x26\x0c\x0c\xd9\xda\x28\x70\x1e\x76\xa1\x6b\xef\x1b\xe3\x05\x8e\x42" +
	"\x4a\x98\x5a\x79\xb5\x4e\x0e\x72\x68\xe5\x48\x40\x58\x2a\x2b\x08\x85\xd5\x7a\xda\xc5\x03\x68\x5c\xc5\xbb\x60\xee" +
	"\x33\x71\x04\xc4\xfd\xf6\xf3\x68\x64\x25\xd6\xb1\x6f\xf5\xaa\xbb\xb6\x1d\xce\xb8\x9c\x75\xa9\xaa\xf4\x5f\x25\xfe" +
	"\xaf\x69\x78\xc3\xac\xeb\xae\x74\xfe\xf6\x4e\xe8\xab\x36\xf6\xaf\x53\xdb\xfe\xad\x5f\x58\x49\x12\xe9\x77\x41\x32" +
	"\xeb\xba\xc8\x03\xaf\xb4\xb1\xe9\xab\x9b\xa7\x51\x45\xe2\x5b\x12\x09\x76\x10\xca\xf6\x3e\x7b\x9d\x67\x55\xa3\xd8" +
	"\xf4\x36\x29\x3e\x9f\xe3\xbb\x7b\xf1\x30\xe8\xe2\xb0\x43\xdb\xce\x40\xca\xbd\x3b\x03\x5e\x6a\x3b\x78\x47\xa5\x7e" +
	"\xa3\xd1\x2c\xd8\xc2\xe8\x7a\x5b\x60\x37\x7b\x7e\xc0\xa8\x97\xda\x4e\xba\xb9\xe7\x4d\x33\x99\x57\xcc\xe7\xe0\xfa" +
	"\x70\x1a\x76\xac\x20\x96\x91\x09\x03\xf7\xaf\xa8\x59\x89\xc5\x3a\x41\xb3\xda\x2d\x9c\x51\xce\xd2\x7d\x02\xe5\x4e" +
	"\x4b\x52\x51\x13\xcf\x76\x4f\x22\x19\x9e\x3f\x61\x8f\xcf\x50\x9f\xb0\x7f\x7a\xf2\xf8\x9a\xd5\x7e\x8d\x25\x94\x90" +
	"\xae\x86\x75\xbb\x5d\x15\xba\x96\x19\xd8\x9b\x16\x99\x5f\xf0\x61\x77\x25\xb1\xbd\x1f\x84\x06\x4b\x34\xab\xc5\x25" +
	"\xfb\x7a\xba\x07\xcd\xed\x1e\xbc\x1e\xd9\xa1\x67\x59\x31\x2b\xaa\xfc\xe4\xd3\x7a\x93\x7f\x28\x4b\x26\x67\x9c\x1e" +
	"\x60\xe9\xd2\x4f\x60\xb6\x93\x61\x48\x26\xc6\x63\x39\x79\x49\x26\x1f\xa1\x57\xf9\x95\x24\x59\xba\xf2\x9c\x29\x6f" +
	"\x3b\x72\xa3\xcb\x5e\xb3\xe3\xff\x80\xd4\xbe\x46\x24\x3e\x68\xfb\xb9\xf4\xd9\x7a\x52\xd9\xc5\x61\xcc\xf0\xec\x2d" +
	"\x18\x49\x90\xca\xe2\xf7\xe3\x21\x9e\x9e\xfd\x80\x34\x2b\x52\xd9\xc7\x3c\x1f\x0c\x77\xe7\x7e\xe1\xf4\x0f\x55\x91" +
	"\x19\xf6\xe6\x20\x19\x27\x30\x28\x3a\xf6\x14\x99\xc5\x41\x57\xc2\xdf\x81\xe2\x01\x88\x7d\x91\x48\x61\x7a\xc3\x25" +
	"\x78\x1c\x6a\x73\xb9\xe5\x9b\x04\xbf\x4f\xb2\xb7\xdd\x84\xa7\x03\xe9\x89\x0e\x3c\x85\xa7\xf9\x0b\x32\x5f\x7c\xde" +
	"\x9e\x0c\xcb\xb2\x77\x5c\x9c\x16\x17\xd6\xf9\x8d\xfe\x07\x40\xf5\x35\x23\x85\x34\x4d\xaf\x7f\x26\xef\x41\xba\xc8" +
	"\x1f\x18\x8c\x57\x2f\x54\x9a\xa6\xf1\x75\x4b\x3f\x03\x00\x00\xff\xff\xd6\x0d\x0f\x8b\x0f\x08\x00\x00")

func bindataTpl30collectionmethodsgotplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTpl30collectionmethodsgotpl,
		"_tpl/30_collection_methods.go.tpl",
	)
}



func bindataTpl30collectionmethodsgotpl() (*asset, error) {
	bytes, err := bindataTpl30collectionmethodsgotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "_tpl/30_collection_methods.go.tpl",
		size: 2063,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1547575483, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTpl40binarygotpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xcf\xb1\x4e\xc3\x30\x10\xc6\xf1\x19\x3f\xc5\x37\x30\xc4\x08\xf9\xde" +
	"\x01\x26\x86\x8e\x4c\x88\xc1\xb9\x5c\x53\x4b\xc9\x5d\x75\xb5\x91\xaa\x28\xef\x8e\xa0\x50\x51\xa6\x76\xf6\xdf\x9f" +
	"\xee\x47\x84\x57\x9d\xb3\x1f\x76\x79\x7a\x2a\x9a\xfd\x88\x32\xef\x27\x99\x45\xeb\x01\xa2\x6c\x43\xd1\x31\x9d\x9e" +
	"\xce\xa5\x78\x0a\xdb\xa6\x8c\x8e\x19\x0f\xcb\x72\x9f\x9e\x6d\x9a\x84\x6b\x31\x5d\xd7\xf8\x7f\xb2\x1b\x72\xcd\x78" +
	"\x7b\xef\x8f\x55\x22\xc4\xdd\x1c\x4b\xb8\x73\xa9\xcd\x15\xcc\xe9\xdc\x7f\x97\x11\x44\x78\xf9\xbd\x42\x06\x7c\x94" +
	"\x8c\xb1\xd4\x5d\xeb\x13\xdb\x4c\xa3\x8d\x46\x7b\xb7\x6a\x7d\xdb\x86\x35\x04\x22\x6c\xae\x24\x6c\xae\x03\x5c\xcc" +
	"\x75\x11\x7f\x05\x8f\x5f\x82\x93\x22\x5e\x32\x7e\x7e\x75\x11\x37\x0a\x3e\x03\x00\x00\xff\xff\x22\xed\xb8\x7c\x86" +
	"\x01\x00\x00")

func bindataTpl40binarygotplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTpl40binarygotpl,
		"_tpl/40_binary.go.tpl",
	)
}



func bindataTpl40binarygotpl() (*asset, error) {
	bytes, err := bindataTpl40binarygotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "_tpl/40_binary.go.tpl",
		size: 390,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1543131929, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTpl90testgotpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xdd\x8e\xdb\x36\x13\xbd\xa6\x9e\x62\x3e\xe1\x4b\x20\x25\x0a\x37" +
	"\x01\x8a\x00\x75\x9a\x8b\xac\xb5\x9b\x1a\xf5\xfe\x34\x5e\xa4\x05\x82\x20\xa0\xc5\xb1\x4d\x84\x26\x05\x72\xb4\xf6" +
	"\x42\xd0\xbb\x17\xa4\xe4\x9f\x24\xbb\x41\x5a\xf4\xa2\x77\x36\x39\x73\x38\x73\xce\xe1\x50\x8b\xc6\x54\x70\x83\x9e" +
	"\x2e\x71\x73\x23\xe6\x1a\x7d\x46\xf0\x84\xd0\x93\x32\x4b\x7e\x93\x43\x9b\x30\x39\x87\xd1\x6b\x90\x6b\x1d\x96\xf9" +
	"\x45\xe3\x69\x6c\x8d\xc1\x8a\xca\xd3\x8c\xf2\x84\x49\x5c\xa0\xdb\xef\x8f\xb5\xf5\x98\x51\x01\x72\x9e\x27\x09\x6b" +
	"\xdb\x8d\xa2\x15\xf0\x70\xc6\xec\xf7\x69\xd9\xac\xeb\xb7\xda\xce\xaf\x05\xad\xba\xee\xcb\xcc\x61\x7b\x6a\x85\x0c" +
	"\xf9\x69\xdb\xf2\xae\x4b\x0b\x78\xfc\x55\xc0\x55\x4d\xca\x1a\xdf\x26\x8c\xcd\x3e\xab\xba\x3c\x1d\x6b\x14\xa6\xa9" +
	"\x47\x40\xae\xc1\x22\x61\x5d\x9e\xe5\x6d\x8b\x46\x76\x5d\x92\xb0\x8a\xb6\xa1\xfe\xca\x1a\xc2\x2d\xf1\x9b\xab\xf2" +
	"\x2a\xcb\x13\x46\x73\xed\x0b\x40\xe7\xc2\xe6\xa1\xfb\x8a\xb6\xa1\x74\x5e\x9e\xe6\x09\x13\xde\xa3\x23\x7e\x69\xcf" +
	"\x9c\xb3\x2e\x14\x85\xce\x85\xae\x68\xae\x2f\xc5\x1a\x7d\xc8\x0d\x40\x7c\xc8\xce\x13\xe6\xad\x23\x3e\x23\xa7\xcc" +
	"\xd2\x67\xbb\xb8\x03\xd6\xd9\x56\x54\xa4\xef\x02\xd6\x87\x8f\x3e\x86\xb5\xd0\xb6\xcf\xc0\x09\xb3\x44\xf8\x3f\x05" +
	"\xa0\x00\x3b\x40\x42\xd7\xa5\x6d\x3b\xfc\x0b\x58\x81\x92\x10\x1f\xdb\xeb\x0a\x38\x1c\x91\xb0\xd0\xcd\x50\xd0\x7b" +
	"\xa1\x95\x14\x84\xa1\xa1\x87\x3b\x61\xb7\xc2\x41\xed\xe1\x49\xed\xb1\x91\x96\xcf\xd0\xdd\xaa\x0a\x13\x56\x7b\x78" +
	"\x0d\xc3\x62\x50\xfc\x12\x37\xc3\x5e\xf6\xbc\x80\xc7\xc3\xce\x4e\x89\xa9\x30\xcb\x11\xa4\x12\xd3\xe2\x5c\x5b\x41" +
	"\x17\x62\x5b\x62\xa5\xd6\x42\xfb\xd1\xcb\xae\x48\x18\x1b\x12\xfe\x50\xb4\xba\x11\xcb\x73\xf1\x19\xcf\x1b\x53\x65" +
	"\xe9\x06\xe7\x5e\x11\x7e\x52\x32\x2d\x20\x98\x31\x5b\x8b\xed\x14\x0d\x28\x43\x39\x64\xca\x10\xba\x85\xa8\xb0\xed" +
	"\x62\xc5\xd6\x45\x47\x32\xe6\x90\x1a\x67\xe0\x45\x01\x46\xe9\x84\xb1\x2e\xff\xde\x29\x9e\xac\xfb\xb7\xce\x08\xdc" +
	"\x8f\x1b\x4f\x76\x3d\xb6\x12\x21\xbd\x97\xa4\x81\x99\x14\x9e\x75\x5d\xc2\x82\x34\x27\x27\x10\x9c\x07\xae\x31\x40" +
	"\x2b\xeb\x11\x82\xa5\x3d\x28\x03\xb5\x70\x42\x6b\xd4\x09\xfb\xbe\x0f\x12\x46\xfc\x5d\x63\xb2\xb4\x6d\xdf\xda\xb1" +
	"\x58\xa3\xfe\xc2\x16\x9f\xce\x0c\x29\xba\xdb\xf5\xf8\xcd\x35\x66\x55\x25\xf7\x7e\x0d\xe5\xc6\xdc\x6c\x8f\x70\x3f" +
	"\x6a\xa8\x9d\x29\x33\xa3\x35\xed\x6f\x4b\x55\x49\x3e\x31\xc1\x50\x59\xce\x4f\x1b\xa5\xe5\x7b\xa1\x9b\x60\x7f\x7e" +
	"\xed\xb0\x16\xae\x77\x1d\x9c\x9c\x40\x69\xc1\x58\x82\xc6\x23\x4c\x96\xc6\x3a\xcc\x72\x20\x0b\xbe\xa9\x6b\x87\xde" +
	"\x43\x79\xda\x53\xee\x79\xc2\xee\x37\x69\x01\xe9\xa3\xa7\xb7\xe9\xce\xb0\x4c\x19\xff\xc6\x91\xf2\xc2\x84\x52\xfa" +
	"\xca\xa2\xe2\x6f\xdc\x32\x5e\xc0\x87\xe6\x51\x1f\x1a\xfb\xf1\xa8\x8f\x30\x42\x3b\x33\xd4\x58\xd1\xe9\xdd\xf5\x6f" +
	"\x59\x7e\x84\xc6\xcf\xb6\xb5\x30\xf2\x5a\x8b\x0a\x7f\xb5\x5a\xa2\x0b\x47\x24\x8c\x2d\xac\x03\x15\x92\x9f\xbf\x02" +
	"\x05\xbf\xc0\xcf\xaf\x40\x3d\x7d\xda\xfb\x06\xa3\x0e\x93\x88\x6d\x70\x93\x3d\x44\x2c\x63\x4c\x2d\x76\x9c\xd6\x9e" +
	"\x07\xbf\x96\x82\x44\xb6\x03\xc8\x5f\xc5\xdd\xff\xbd\x0e\x06\xec\xb1\x19\xf1\x48\xce\x22\x4b\x27\xe5\x9f\x1f\x1e" +
	"\xc9\x8f\x23\xe8\xe9\x51\x7b\x86\x76\xce\x0d\x3f\xc3\x00\x64\x4c\x4f\xca\xe3\x11\x3e\x5e\x61\xf5\x79\x2a\x3c\xf5" +
	"\x22\x4e\xca\x38\x6e\x23\xee\xe8\xcb\xc7\x80\x7f\xdf\x6a\x79\x76\x50\x83\xbf\xc3\xca\x3a\x99\xa5\x41\xaa\x5d\x03" +
	"\xfc\x6c\x8b\xd5\xb8\x9f\xbc\xd1\x13\x7d\xd7\xc7\x49\x1e\xa9\xa7\x74\xe0\xed\xaa\xa1\x1f\x20\xce\xd9\xcd\xd8\x36" +
	"\xe6\xe0\xc9\x83\xa4\x7c\x62\xe8\xe5\x4f\x3e\xd3\x93\x32\xe7\xf1\x31\x89\x33\x7d\x8f\x1e\xf3\x7f\xc8\x6a\xf7\xcc" +
	"\xec\x46\x05\xf0\xec\x45\x5e\xc0\xa1\x84\x20\xc5\x23\x39\x82\x77\xc3\x0a\x48\x25\xa3\xed\xd7\x82\xaa\x55\xd0\xa6" +
	"\x6f\xf0\xe8\x7a\x57\x56\x87\xaa\xfb\x6b\xce\xc7\x56\x37\x6b\xd3\xdf\xf1\x18\xa7\x16\x31\x84\x4f\x7c\xff\x92\xf4" +
	"\x73\x84\x7d\x53\xd2\x14\xcd\x92\x56\xa1\xb0\xb6\x8d\x09\xe3\x95\x70\x17\x71\xba\x2d\x69\xd5\x33\x11\x1e\x89\xc7" +
	"\x3b\x45\x78\xdb\x0e\x67\x0e\xd4\x5e\x88\xbb\x39\x5e\x3b\x75\x2b\xa8\x2f\x8b\x9f\x2b\xd4\xf2\x28\xe9\xaa\xa1\xbf" +
	"\x93\xb5\x23\xe3\x87\x53\xc0\xaf\x6c\xa3\xe5\x9e\xac\xa0\xdb\x40\xc3\x33\x40\xed\x11\xd4\x22\xb2\xb9\x63\xe4\xce" +
	"\x13\xae\xdf\xa3\xf3\xca\x1a\x94\x0f\x51\x13\x35\xfd\x07\x5d\xff\x17\x9a\x8e\x5f\x2e\x5f\xfd\xe9\xc2\x77\x4d\x72" +
	"\xb4\xd4\x25\x7f\x05\x00\x00\xff\xff\xe1\x47\x30\x9a\xbd\x09\x00\x00")

func bindataTpl90testgotplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTpl90testgotpl,
		"_tpl/90_test.go.tpl",
	)
}



func bindataTpl90testgotpl() (*asset, error) {
	bytes, err := bindataTpl90testgotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "_tpl/90_test.go.tpl",
		size: 2493,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1547706026, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTplFbs10headergotpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x31\x4e\x43\x31\x10\x05\x7b\x9f\x62\x15\xd1\xf2\xdd\x13\x51\xd0" +
	"\xd1\x81\xc4\x09\x36\xf6\xc3\x58\xf1\xdf\xfd\xac\x6d\x0a\x56\xbe\x3b\x22\x07\x48\x33\xd5\x68\x26\x46\x7a\x99\x43" +
	"\xa9\x40\x60\x3c\x90\xe9\xa7\x32\x95\x3a\xbe\xe6\x65\x4b\xba\xc7\xa4\x86\x3e\xd4\x50\x35\x1e\xd7\x12\xfb\x77\x8b" +
	"\x79\x6f\x05\x12\x82\xf0\x8e\x7e\x70\x02\xb9\x6f\xef\x9c\xae\x5c\xb0\xd6\x39\x84\x2a\xa9\xcd\x0c\x3a\xdd\x0b\x0d" +
	"\x35\x2e\x88\x32\x5b\xbb\x61\xfb\xbc\xf4\xd3\x39\x04\x77\x63\x29\xa0\x07\x3d\x46\xa7\xa7\x67\xda\x3e\x60\x95\x5b" +
	"\xfd\x85\xbd\x82\x33\xec\xed\x18\x55\xa5\xd3\xe3\x5a\xc1\xfd\xe6\xfd\x6f\xdd\x21\x79\xad\xf0\x17\x00\x00\xff\xff" +
	"\x85\x4a\x09\x56\xd4\x00\x00\x00")

func bindataTplFbs10headergotplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTplFbs10headergotpl,
		"_tpl/fbs_10_header.go.tpl",
	)
}



func bindataTplFbs10headergotpl() (*asset, error) {
	bytes, err := bindataTplFbs10headergotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "_tpl/fbs_10_header.go.tpl",
		size: 212,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1544556941, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTplFbs20messagegotpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\xb1\x4a\x03\x41\x10\x86\xeb\xdb\xa7\x98\x17\x70\xd3\x27\x95\x5e" +
	"\xd4\xce\xc6\x74\x22\x64\x34\xbf\xc7\xc2\xdc\xee\xb1\x3b\x87\xc4\x61\xde\x5d\xc2\x5a\x24\xad\xdd\x0f\xf3\xf1\x31" +
	"\xdf\x66\x43\x66\xf1\x31\x6b\xd2\xb3\x3b\x55\x2c\x15\x0d\x59\x1b\x31\xb5\x94\x27\x01\xd5\xf2\x4d\x5f\xa5\xd2\xfe" +
	"\x81\x94\x3f\x04\x74\x34\x8b\x87\xcb\x7a\xe1\x19\xee\xc7\x48\xf7\xab\x16\x9a\x90\x51\x59\x71\x8a\xa1\x73\xd7\x62" +
	"\x0b\x83\xd9\x1d\x55\xce\x13\x28\x8e\x45\xd6\x39\x37\xf7\x30\x0c\x66\xcf\x65\xe4\x19\x42\xf1\x29\x41\x4e\xee\x5b" +
	"\xb3\x57\xd4\xc4\x92\x7e\x50\x0f\xe7\x05\x14\xdd\x77\xd4\x5f\xfd\x63\xba\x0e\xf9\x32\x3d\x84\x7e\x1b\x8b\x08\x3e" +
	"\x35\x95\x7c\x9b\x32\xaf\xa2\x69\xe9\x29\xed\xdf\x2d\x37\x76\x0b\xc3\x9e\x95\xb7\x6f\x57\x91\xef\xbb\xe0\xe1\x37" +
	"\x00\x00\xff\xff\x0e\x67\xfe\xed\x51\x01\x00\x00")

func bindataTplFbs20messagegotplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTplFbs20messagegotpl,
		"_tpl/fbs_20_message.go.tpl",
	)
}



func bindataTplFbs20messagegotpl() (*asset, error) {
	bytes, err := bindataTplFbs20messagegotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "_tpl/fbs_20_message.go.tpl",
		size: 337,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1547575483, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTplProtobuf10headergotpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x31\x4b\x05\x31\x10\x84\xfb\xfb\x15\x4b\xb0\xf5\x52\xd8\xf9\xb8" +
	"\xc2\xce\x4e\xc1\x1f\x20\xfb\xee\xd6\x35\xbc\x5c\x36\x6e\xf6\x44\x0d\xf9\xef\x62\xe4\xe9\x81\x60\x13\x66\x60\xe6" +
	"\x63\xb2\xde\xc3\xcd\x66\x02\x4c\x89\x14\x8d\x16\x78\x0d\x08\x1c\xec\x79\x3b\x8e\xb3\xac\x7e\x16\xa5\x62\xa2\x14" +
	"\xc4\xe7\x13\xfb\xf2\x12\xfd\xb2\x46\xa6\x34\x94\xf7\x64\xf8\x06\x13\xb8\xac\x62\x72\xe5\x0e\x43\xc6\xf9\x84\x4c" +
	"\x50\xeb\x78\xff\x2d\x5b\x3b\x0c\x61\xcd\xa2\x06\x6e\x87\x65\x61\xf1\xbd\x76\xdc\x9e\xba\xeb\xa6\xab\xb1\x4b\xb7" +
	"\xeb\x89\x70\xa4\xdf\xb8\x85\x95\x8a\xe1\x9a\xff\x26\xff\x19\x6e\xa2\xc8\xe4\xd3\x16\x63\x7f\x7e\xca\x92\x2d\x48" +
	"\x02\x96\xc7\xf3\xfc\x09\xdc\xfe\x07\xee\x30\xd4\xaa\x98\x98\xe0\x42\xb2\x15\xb8\x9e\x60\x7c\x20\x0d\x18\xc3\x07" +
	"\xe9\x2d\xe1\x42\x7a\xd7\x29\x05\x2e\x5b\x3b\x13\x6b\xed\xf1\xaf\x13\xd4\x4a\x69\x69\x6d\xf8\x0c\x00\x00\xff\xff" +
	"\x81\xcf\xcc\x5d\x70\x01\x00\x00")

func bindataTplProtobuf10headergotplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTplProtobuf10headergotpl,
		"_tpl/protobuf_10_header.go.tpl",
	)
}



func bindataTplProtobuf10headergotpl() (*asset, error) {
	bytes, err := bindataTplProtobuf10headergotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "_tpl/protobuf_10_header.go.tpl",
		size: 368,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1544460649, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTplProtobuf20messagegotpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x41\x4b\x03\x31\x10\x85\xcf\xcd\xaf\x78\xf4\xa4\x87\xa6\x78\x2e" +
	"\x3d\xe8\x56\xc5\x8b\x14\xec\x4d\x84\xa6\xed\x74\x09\x24\x99\x25\xc9\x22\x75\x98\xff\x2e\xdb\xa5\xc8\x9e\xbd\xcd" +
	"\x83\xf7\xbe\x84\x6f\xb9\x84\x88\x7d\x4e\xd5\xd7\x8b\x2a\x32\x75\x99\x0a\xa5\x5a\xe0\x50\x7c\x6a\x03\x21\xf3\x37" +
	"\xce\x9c\xb1\x79\x42\x75\x87\x40\xd8\x8b\xd8\xdd\x70\xbd\xbb\x48\xaa\x7b\x8b\xc7\xbe\x32\x5a\x4a\x94\x5d\xa5\x93" +
	"\x35\x91\x4a\x71\x2d\x4d\xd0\x62\x66\x22\x0b\x64\x97\x5a\x82\x6d\x38\xf4\x31\x15\x55\x11\xf8\x33\xde\xca\x8b\xa7" +
	"\x70\xda\xf6\x87\xe0\x8f\xb0\xd7\x00\xd5\x61\xf2\x41\xd9\xbb\xe0\x7f\x28\xef\x2e\x1d\xc1\x0e\x28\x19\x1b\xaa\x58" +
	"\x0f\x61\xcb\x45\x15\x9f\x77\x2d\xb7\xdc\x65\xae\x6c\x8f\x7d\xa9\x1c\x93\x8b\x74\xbf\x9e\x8b\xbc\x72\xe3\x22\x05" +
	"\xdc\x66\x73\x0c\x5f\xf9\x23\x37\xd7\xfa\x8d\xff\xb5\x12\xa1\x74\x1a\x9f\x5f\x60\x3c\xd5\x98\xd1\x55\xc3\x21\xd0" +
	"\xb1\x7a\x4e\x53\x5f\xb1\x0f\xd5\x77\xa3\xaf\xf2\x0f\x61\x13\xbe\x98\x59\xa6\x8e\x86\xd2\x44\xe6\xc6\x55\x87\x35" +
	"\x1e\x56\x46\xcd\x6f\x00\x00\x00\xff\xff\xc5\x5a\x52\x54\xc3\x01\x00\x00")

func bindataTplProtobuf20messagegotplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTplProtobuf20messagegotpl,
		"_tpl/protobuf_20_message.go.tpl",
	)
}



func bindataTplProtobuf20messagegotpl() (*asset, error) {
	bytes, err := bindataTplProtobuf20messagegotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "_tpl/protobuf_20_message.go.tpl",
		size: 451,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1547650332, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"_tpl/10_tables.go.tpl":             bindataTpl10tablesgotpl,
	"_tpl/20_entity.go.tpl":             bindataTpl20entitygotpl,
	"_tpl/30_collection_methods.go.tpl": bindataTpl30collectionmethodsgotpl,
	"_tpl/40_binary.go.tpl":             bindataTpl40binarygotpl,
	"_tpl/90_test.go.tpl":               bindataTpl90testgotpl,
	"_tpl/fbs_10_header.go.tpl":         bindataTplFbs10headergotpl,
	"_tpl/fbs_20_message.go.tpl":        bindataTplFbs20messagegotpl,
	"_tpl/protobuf_10_header.go.tpl":    bindataTplProtobuf10headergotpl,
	"_tpl/protobuf_20_message.go.tpl":   bindataTplProtobuf20messagegotpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"_tpl": {Func: nil, Children: map[string]*bintree{
		"10_tables.go.tpl": {Func: bindataTpl10tablesgotpl, Children: map[string]*bintree{}},
		"20_entity.go.tpl": {Func: bindataTpl20entitygotpl, Children: map[string]*bintree{}},
		"30_collection_methods.go.tpl": {Func: bindataTpl30collectionmethodsgotpl, Children: map[string]*bintree{}},
		"40_binary.go.tpl": {Func: bindataTpl40binarygotpl, Children: map[string]*bintree{}},
		"90_test.go.tpl": {Func: bindataTpl90testgotpl, Children: map[string]*bintree{}},
		"fbs_10_header.go.tpl": {Func: bindataTplFbs10headergotpl, Children: map[string]*bintree{}},
		"fbs_20_message.go.tpl": {Func: bindataTplFbs20messagegotpl, Children: map[string]*bintree{}},
		"protobuf_10_header.go.tpl": {Func: bindataTplProtobuf10headergotpl, Children: map[string]*bintree{}},
		"protobuf_20_message.go.tpl": {Func: bindataTplProtobuf20messagegotpl, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
