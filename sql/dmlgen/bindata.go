// Code generated by go-bindata. DO NOT EDIT.
// sources:
// _tpl/10_tables.go.tpl
// _tpl/20_entity.go.tpl
// _tpl/30_collection_methods.go.tpl
// _tpl/40_binary.go.tpl
// _tpl/90_test.go.tpl
// _tpl/fbs_10_header.go.tpl
// _tpl/fbs_20_message.go.tpl
// _tpl/protobuf_10_header.go.tpl
// _tpl/protobuf_20_message.go.tpl

package dmlgen


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTpl10tablesgotpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x41\x8f\xd3\x30\x10\x85\xcf\xf6\xaf\x78\x54\x1c\x12\x64\xdc\x7b" +
	"\x51\x0e\x6c\x17\x71\x61\x17\x56\x8b\xc4\xd9\x4d\x26\xad\x45\x62\x57\x63\x17\x5a\x45\xfe\xef\x68\x92\x6a\xb7\xb7" +
	"\x95\x38\xc5\xf9\x3c\x7e\xf3\x66\x5e\x1b\x43\xca\xa8\xf4\x34\x7d\x04\xbb\xb0\x27\xbc\xcf\x6e\x37\x10\x36\x0d\xec" +
	"\x4f\x39\x25\x94\xa2\xd5\x7c\x7c\x74\x23\x4d\xd3\xd7\xb8\x75\x23\x0d\xd7\x6b\x61\xa5\xa0\xc1\x6a\x9a\x6e\xc9\x6a" +
	"\x96\xa4\xd0\x95\xa2\x6b\xad\xd7\x6b\x3c\xd2\xdf\xab\x20\x53\x3e\x71\x48\x70\xd8\x47\xdf\x7b\xea\xf0\x87\x38\xf9" +
	"\x18\x10\x7b\xe4\x03\xe1\xe1\xf2\xfc\xf4\x6d\xfd\xe0\xd8\xbb\xfb\x3b\x2c\x86\x52\x7b\xa0\xd1\xa1\x8f\x2c\x25\x22" +
	"\x38\xf3\xb4\xc1\x6d\xe3\x54\x8a\x5c\x7d\x3e\xe5\x88\x3d\x05\x62\x97\xa9\xc3\xee\x82\x6e\x1c\xf6\x14\xac\xee\x4f" +
	"\xa1\x7d\xb5\x52\xb5\xf9\x8c\x36\x86\x4c\xe7\x6c\xb7\xcb\xd7\xa0\xdb\x49\xb9\x7d\x3a\x11\x5f\xbe\x9c\xa9\xfd\xc1" +
	"\x74\x74\x4c\x6c\x10\x8f\x39\xc1\x5a\xdb\x75\xc3\xd2\xf3\xfb\x31\xfb\x18\x6a\x54\x79\xc4\x87\x17\x9a\x0c\x31\x83" +
	"\x98\x23\xd7\x98\xb4\xf2\x3d\xf2\x68\x04\xa0\x81\x54\xbd\x1a\xd0\x4a\x09\xf8\xe5\xf3\x61\xcb\xe4\x32\xcd\x5c\x7c" +
	"\x89\x0f\x83\xb7\x82\x51\x78\x23\x1a\x83\xd5\xca\x68\xa5\x5e\xe2\xa8\xcd\x4d\xcf\xfb\xbb\xaa\xdb\x09\xa9\x3f\xcd" +
	"\xf6\xde\x35\x08\x7e\x10\xcf\x6a\x49\x49\x7e\xcd\x32\x4a\x9a\x5f\x3c\x67\xd7\xfe\xae\x88\xb9\xd6\xaa\xcc\xa3\xc9" +
	"\xbb\x4d\x83\x3c\xda\x65\x1b\xa9\x92\x35\x59\x6b\xff\x57\xf3\x5a\x25\x2b\x0b\x7e\xd0\x45\xff\x0b\x00\x00\xff\xff" +
	"\x1c\x29\xb4\xc0\xa6\x02\x00\x00")

func bindataTpl10tablesgotplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTpl10tablesgotpl,
		"_tpl/10_tables.go.tpl",
	)
}



func bindataTpl10tablesgotpl() (*asset, error) {
	bytes, err := bindataTpl10tablesgotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "_tpl/10_tables.go.tpl",
		size: 678,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1547575483, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTpl20entitygotpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x5f\x73\xdb\xb8\x11\x7f\x26\x3f\xc5\x9e\xe6\xee\x4a\x7a\x64\x28" +
	"\x0f\x6d\x1f\x9c\xf1\x83\xcf\x76\x52\xb7\xb5\x2f\x13\xfb\xa6\x0f\x1e\x4f\x0d\x83\x4b\x11\x67\x10\x60\x00\x30\x8a" +
	"\x8e\xc3\xef\xde\x59\x90\x94\x44\x49\xfe\x93\x7a\x3a\xcd\x4c\x94\x88\x20\xf6\xef\x6f\xf7\xb7\xab\xd9\x0c\x9a\x86" +
	"\x9d\x6b\x2f\xfd\xb2\x6d\xc1\x62\x65\xd1\xa1\xf6\x0e\x38\x38\xa9\xe7\x0a\xc1\x9a\x05\xe4\xc6\xc2\xd9\x2f\xe0\xf9" +
	"\x83\x42\xb8\x6f\x1a\x76\x43\xff\xbb\xe2\x25\xb6\xed\x3d\x8b\x67\x33\x38\xa9\xbd\x81\x39\x6a\xb4\xdc\x63\xc6\x9a" +
	"\x66\x21\x7d\x01\xec\xd4\x94\x25\x6a\xdf\xb6\x71\xd3\x30\x38\x6c\xdb\xa6\x41\x9d\xd1\x3f\x87\x20\x73\x60\x7f\xe3" +
	"\xee\x9c\xbb\xe5\xdf\x9d\xd1\x97\xdc\xba\x82\x2b\xb4\xd0\xb6\xf1\x6c\x86\xdc\x2d\x7f\x77\x46\x1f\xd1\x47\x7f\x2b" +
	"\xf6\xcb\x0a\x47\x06\x3b\x6f\x6b\xe1\xa1\x89\x9b\xc6\x72\x3d\x47\xd2\xa8\xea\x52\x3b\x52\xf1\xd1\x9c\xf2\x12\xd5" +
	"\x25\x5f\x3e\xe0\x27\x2b\xbf\x72\x8f\xc0\x3e\x48\x54\x59\xdb\x02\x1d\xdf\x2c\x2b\xbc\xaa\x95\x02\xd6\xb6\x71\x14" +
	"\xf5\x46\x69\x04\x76\x1d\xe4\xde\xf0\x39\x4c\x26\x64\x36\xf9\xbc\x7a\x16\xbe\x1e\x42\x30\x89\xac\xf9\x68\x36\xdd" +
	"\x1c\x1e\xf7\xf6\x7c\xc6\x1c\x2d\x6a\x81\xd9\xa9\x51\x0a\x85\x97\x46\x3b\xe8\x2e\x6e\xbc\xdf\xc6\x21\x8a\xce\xc9" +
	"\xb9\xfe\x27\x77\xfe\x42\x3b\xb4\xfe\xe2\x0c\xea\x2a\xe3\x1e\x1d\xf8\x02\x41\x6a\x61\x91\x14\xc1\xc5\x19\xe4\xe4" +
	"\x08\x84\x30\xd3\x99\xe2\xce\x83\x0c\xb7\x30\x83\x8b\x33\x12\x97\x5b\x53\x02\xd7\x70\x71\x75\x7d\xfe\xf9\x06\x4c" +
	"\x45\xd9\x91\x46\x33\xb8\x28\x2b\x15\x24\x39\xc8\x4a\xc5\x06\x6d\x9d\x7e\xb4\x6c\x3b\x9f\x71\x5e\x6b\x01\x09\xc2" +
	"\xc1\x46\xf4\xd3\x3d\xf6\x26\x32\x03\xa9\xfd\x5f\xff\x9c\x42\x13\x47\xfb\xb2\x22\x73\xe0\x3a\x03\x76\xe1\x3e\xfd" +
	"\x83\x3e\x49\xd3\xc5\xe0\x58\xdb\x02\xb2\x17\x32\x77\xbc\xca\x1d\xe5\x2d\x91\x59\x4a\x8a\x7a\x58\xa1\xce\x28\x5f" +
	"\x71\x1b\xc7\x94\xa3\x5d\xf5\x94\xe1\x0b\x17\x64\x8d\x25\x77\xb0\x83\x6b\xf4\x2b\xfd\x6b\x9d\x0e\x7d\x97\x82\x8c" +
	"\x7b\x1e\xca\x81\x43\xd5\x5f\x27\x6f\x1c\x8a\xda\x4a\xbf\x04\x87\xda\x49\x2f\xbf\x62\x88\x3f\xdd\x1e\xc5\xee\xc7" +
	"\x8d\xe0\xed\xd5\x94\x64\x3b\xc8\x4c\xc7\x17\x29\xae\xaf\x88\x51\x16\x47\x16\x7d\x6d\x35\x60\xdc\x81\xeb\xe3\x5e" +
	"\xcf\xba\x97\x36\x9d\x0b\xa0\x79\xb3\x77\x7b\xb5\x25\xe9\x8e\x77\xe4\xce\x60\xe8\x0b\x5e\xc5\x7d\xb9\xc0\x90\xe8" +
	"\x2e\x63\x97\xbc\xea\xf3\x0b\x72\x0d\x6b\xa9\x3d\xda\x9c\x0b\x84\xee\xf0\x92\x57\x15\x5a\x30\x5a\x2d\xa1\xe2\xd6" +
	"\x4b\xae\xd4\xf2\xb5\x38\x5f\xab\x48\x44\x09\x07\x54\x32\x2b\xa9\x29\xa0\xb5\xc6\x92\x1f\x32\x07\x51\xb2\x4b\x93" +
	"\x61\x92\xc2\xf1\x31\x8c\xde\xeb\xa4\x7d\x46\x9e\x9d\x28\x45\x6f\x0f\x6e\x8b\x72\xb7\x4c\x42\x24\x3e\xd4\x5a\x0c" +
	"\x61\x4a\x7e\x7e\x29\x3a\x69\x5f\x03\xec\xdc\xda\x24\x8d\xa3\x36\x8e\x08\xa7\xa2\x64\x57\xf8\xcd\x27\xa1\x1e\x23" +
	"\xb7\x90\x5e\x14\x20\xe0\xe8\x98\x4e\x3a\x7d\x49\xfa\x1e\x04\x34\xb0\x6b\x46\x1c\x45\x91\xe0\x0e\x61\xd2\x34\x83" +
	"\x9e\xc9\xea\xb5\x13\x25\xb9\x43\xd7\xb6\xd3\x49\x68\x66\x93\xde\x82\x23\xba\x16\x89\xf2\x0d\x4e\x90\x84\x0c\x73" +
	"\x5e\x2b\xdf\x49\x1b\x20\x42\xa1\x76\xec\xca\xf8\x0f\xa6\xd6\x19\xbb\xc2\x45\x9e\x4c\x6e\x9b\x86\x7d\xe2\xe2\x91" +
	"\xcf\xb1\x6d\xef\x46\x04\xd1\xb9\x02\x3f\x7d\x01\x6d\x3c\xe4\x74\x69\x32\x05\x91\xc6\x11\x05\xa8\x8d\xb7\x04\xff" +
	"\x4b\xfa\xe2\xda\x73\xf1\x98\x88\xb2\x0b\x64\xda\x57\xcf\x79\x59\xf9\x25\x60\x59\x79\x89\x0e\xb8\x52\xa1\x62\x42" +
	"\x0d\x38\x30\x79\xf8\x26\x6a\x6b\xa9\x3b\x9b\x87\xdf\x51\x78\x06\x27\xca\x19\x78\xd4\x66\xa1\x81\x3b\xf8\x8c\x0e" +
	"\xfd\x53\x08\x0b\xe2\x93\x74\xf4\x14\x1a\x38\xc0\xd0\xee\x56\x8f\x9a\xf6\x3d\x0c\x16\xf7\x9c\xd1\x34\x6c\xcd\x2c" +
	"\xdb\x1c\x2e\x56\x27\x10\xb8\x73\x44\xe4\x63\x1e\x27\x59\x57\xc6\x83\x2f\x2c\xf2\x0c\x1c\xcf\x71\xa7\x3c\xfe\xc7" +
	"\xb4\x3e\xf2\x63\x45\xed\xd1\x19\xb5\xa5\xf5\x9f\x28\xba\xbd\x1b\x85\xe9\x3e\x08\x9c\x50\xf7\x9a\x9a\x52\x7a\x4a" +
	"\xd2\x72\x72\x1f\x47\xbf\x60\x6e\x2c\xae\x8b\x37\xa2\xd8\x27\x75\xe0\xa7\xe9\x56\x02\xba\x22\xee\x45\x1d\xd2\xed" +
	"\x93\xdc\xa3\xdd\x68\x2e\xdf\x75\xbb\xcb\xcd\x15\x2e\xb6\xdd\x12\x16\x03\x9f\x73\xd0\xb8\x00\xa9\x25\x75\x22\xf9" +
	"\x07\x66\x1b\xb9\x7a\xa2\x2d\xed\x4a\xeb\x01\x33\x52\x10\x68\x77\x76\x10\x47\xd1\xcd\xaf\x67\xbf\x26\x32\x43\x9e" +
	"\x1e\x41\xed\x10\x38\xcc\x95\x79\xe0\x0a\x2a\x63\x14\x2c\x0a\x49\x9d\x80\x6b\xb0\x38\x97\xce\xa3\x0d\xe8\x40\x2e" +
	"\x8a\x0e\x2b\xbe\xc0\x38\x8a\x1e\x42\x0c\x67\x9c\x82\x01\x25\xaf\x44\x57\x50\x64\x50\x80\x95\x33\xe0\x0b\xee\x3b" +
	"\xfe\xc0\xaf\x90\x19\x74\xa1\xd6\x34\x62\x06\xde\x00\x0f\x33\x42\x1c\x45\x9d\x64\x59\x22\x03\x5f\x48\xfd\x48\x48" +
	"\x91\xfe\x4f\x0e\x16\xc6\xfa\x02\x5c\x2d\x0a\xe2\x1d\xee\x3d\x5a\xcd\xe2\xe8\x60\x16\x98\x7c\xa8\xd0\x9f\xb7\x1c" +
	"\xa5\x76\x46\xc8\x38\x82\x92\x3f\x62\x32\xc6\xc4\x14\xde\x4d\xe1\x2f\xe9\x94\x4a\xbc\x8d\xfb\x9a\x13\x62\x27\x5a" +
	"\x29\x38\xc1\xf5\x93\xbd\x7d\x3a\x2e\xd3\x29\xc8\xec\x1b\xd4\xfd\x7c\xb3\xd9\xf6\xd1\xda\xd0\x52\x05\xdb\xc6\x5c" +
	"\x22\xb3\x6f\x53\xc0\xf4\x7d\x78\xe7\x87\x63\xd0\x72\xd4\xfd\x77\x1a\x0f\x5a\xdb\x75\xef\xb5\x58\x64\x23\x02\x7a" +
	"\x93\x2c\x21\xd8\x16\xb0\xff\x7b\x0b\xfb\x17\xb4\x54\x3d\xde\xf7\x53\xf1\x28\xa4\x44\xc2\x2b\x6e\x7e\x8a\x7f\xf7" +
	"\x66\xea\x95\x24\xdc\x53\x5c\xd9\x53\x5c\xc7\xc6\xef\xa1\xa4\xb3\xc0\x65\x4f\xb3\xf2\xf4\xa9\xb3\x6b\x0c\x34\x44" +
	"\xf5\x21\xa7\x80\x24\xba\xe3\x40\x21\x58\xe8\x4e\x14\xae\x71\x90\xc7\xb8\x9a\x02\x4e\x7b\xe0\x24\x32\xdd\x0d\xf5" +
	"\x4b\xc1\x0e\x6c\x45\x7f\x77\x3d\xb8\x16\x5c\x93\x71\xdd\xf0\x71\x6a\x6a\xed\x69\xf6\x78\xd7\xc9\x1d\x0c\x3c\x1e" +
	"\x4c\xbd\x3d\x7a\x77\xd7\x89\x8a\x82\x1f\x1a\x17\xc9\x66\x2b\x8b\x5f\xf6\x63\x50\xb3\xc7\x8d\x17\xbc\x20\xad\x6b" +
	"\x8b\x08\x0c\x3a\x4b\xfa\x07\x04\xc1\x7d\xfe\xad\x41\xb0\x95\x89\xf1\x64\xf3\xec\x68\x43\xe7\xbb\xeb\x00\xfb\x4d" +
	"\xcb\x2f\x35\x0e\x88\x3d\x7c\xeb\xbc\x03\x41\xf1\xf6\xd0\xe3\xc8\xc1\xdd\x51\xd8\x25\x29\x63\x2c\x1d\x2c\x5b\x4d" +
	"\x3d\xd4\xbb\xe1\x29\x5b\x65\x2e\xc3\x1e\xd9\x4d\x67\x51\x34\x9b\x81\x36\x40\x2d\x9e\x9a\x69\xe8\xc3\xd2\x85\xce" +
	"\x8b\xd9\xff\xd9\x17\x38\x98\xbd\x7d\x8c\x1b\x11\xdb\x33\xa3\xdc\x50\x1d\x1b\xba\x76\x34\x5d\xd7\x55\x65\x68\x39" +
	"\xde\xaf\xed\x37\xdd\x0d\x6a\xd4\x2f\x8e\xe0\xa7\x2f\x93\x29\x4d\x20\x52\xcf\x93\x32\x1d\x75\xbb\x61\x30\x0c\xdb" +
	"\xc8\x73\x80\xea\x46\xaa\x3d\xd1\x5a\xed\x5c\x1c\x9c\x92\x02\x81\xd6\xc9\x50\x0b\x2e\x10\x66\xff\x94\x66\xcc\xaf" +
	"\x5c\xd5\xe8\xf6\xfd\xc2\x32\xea\x94\x3f\x6e\xb5\xca\x7d\x29\xb2\xe8\x81\x31\xb6\xbb\x5d\xde\xde\xed\xdb\xc9\x64" +
	"\x4e\x66\x52\x27\xd9\xa0\x03\x38\x1e\xc8\x76\xfb\x4a\x20\x5c\x85\x7a\xa8\xe6\x74\xbd\x81\xfc\xfb\xc9\x8e\xd9\x49" +
	"\xec\xdb\x80\x45\x3f\xdd\x5c\x01\xd7\x3b\xc1\x66\xf4\x2d\xfa\xb8\x85\x61\x70\xdc\xb3\xe3\xef\x2b\x94\xa7\xf2\xf0" +
	"\x80\xca\xe8\x79\x08\x7a\x18\xdf\x3b\x80\xdd\xaf\xeb\xe5\x9e\x6e\xd2\x06\xfc\xba\x8c\x85\xe5\xb2\x0e\x18\xe8\x33" +
	"\xd7\x6d\x06\xdc\xf7\xb2\x43\x22\x6f\x8a\xd5\xe9\x42\x2a\x05\x0f\xb4\x46\x28\x8f\x16\xb3\x8e\x19\x35\xad\xa6\x20" +
	"\x35\x70\xf8\x68\x68\xe6\x62\x70\x65\x68\x6c\xff\x52\xa3\x5d\xc2\x1c\xbd\x23\x39\xf8\x0d\x45\x4d\x50\xf8\x2e\x68" +
	"\x74\x10\x7d\x05\x40\xb6\xc1\xf1\x9d\xc0\x78\x06\x14\x1b\xe3\xe9\x11\x70\xb0\x58\xbb\xb0\x8f\x94\xbc\x0a\xc1\xa6" +
	"\x59\x35\x93\x79\xf8\xdd\xcc\x03\x57\x73\x63\xa5\x2f\x4a\x07\x19\x52\xc8\xa5\x9e\x03\xed\x33\x05\x82\x93\x7f\xd0" +
	"\x8c\x3a\xac\x5f\x3d\xb4\x42\x32\x18\x5c\x9b\x12\x69\xdc\xa4\xac\xe5\xc6\xce\x08\x8b\xca\x98\x0a\x6c\xad\x1d\xe4" +
	"\x3c\x8c\xbc\xbe\xe0\x14\x67\x0a\x32\x4d\x9c\xd4\xb2\xb2\xba\x3a\x2d\x50\x3c\x12\x66\x83\x53\x25\xaf\x6e\x37\xdd" +
	"\xba\x7b\x30\x46\xed\x38\xf6\x3c\xd4\x65\x0e\x3f\x0c\x82\x6f\x3b\x94\x7f\xb2\xb2\x0c\x3f\xa6\x0c\x35\x74\xb7\xe2" +
	"\xd0\xbd\x55\xb1\xf3\x7e\xe8\x7c\x2f\x0b\x3d\x06\x6f\x6b\xdc\x5e\x78\xc7\x85\xf4\x9f\x00\x00\x00\xff\xff\xd0\x54" +
	"\x53\xc8\x08\x16\x00\x00")

func bindataTpl20entitygotplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTpl20entitygotpl,
		"_tpl/20_entity.go.tpl",
	)
}



func bindataTpl20entitygotpl() (*asset, error) {
	bytes, err := bindataTpl20entitygotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "_tpl/20_entity.go.tpl",
		size: 5640,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1547844064, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTpl30collectionmethodsgotpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x95\x41\x8f\xa3\x38\x10\x85\xcf\xf0\x2b\xde\x61\xb5\x82\x6d\x42\xb6" +
	"\xaf\x99\xc9\x61\xb6\x67\x66\x35\xe7\xde\x3d\x45\xd1\xca\x31\x45\x70\x62\xec\xac\x31\x1d\x05\xc4\x7f\x1f\xd9\x40" +
	"\x42\x3a\x91\x46\xad\x48\x7d\x80\x2e\x5c\xf5\xea\x7b\x55\xce\x7c\x8e\xef\x42\x5a\x32\xff\x14\xa2\x42\xee\x1f\x2b" +
	"\xd8\x82\xc0\x6b\x63\x48\x59\x54\x52\x70\xc2\xe6\x84\x83\xa1\x4c\x70\x66\x09\x39\x8e\xc2\x16\xba\xb6\x28\xa9\xd4" +
	"\xe6\x04\x26\xa5\xe6\xcc\x0a\xad\xd2\x70\x3e\xc7\x97\xda\x6a\x6c\x49\x91\x61\x96\x32\xbc\x09\x86\xac\x94\x5b\x52" +
	"\x69\x98\xd7\x8a\x23\xe2\x1c\x7f\xb4\x6d\xfa\xa2\xa5\x24\xee\x8e\x75\x5d\x3c\xe8\x88\x72\xb8\x6f\x22\x17\xff\xa6" +
	"\xac\xb0\x27\x17\xdb\x68\x2d\xe3\x9b\x33\x68\xc3\x60\x83\xc5\x12\x9c\xa7\x5f\x99\x65\xab\xc5\x9f\xeb\x30\xc8\xb5" +
	"\xc1\x7f\x09\xc8\x05\x0c\x53\x5b\x1a\xc3\xee\xf3\x40\xe4\xc8\x23\x8a\xfd\x73\xb0\xc1\x12\xec\x70\x20\x95\x45\x9b" +
	"\x04\x14\x87\x41\xd0\x85\xee\x6f\x3c\xb1\xc4\x26\x0c\x0c\xd9\xda\x28\x70\x1e\x76\xa1\x6b\xef\x1b\xe3\x05\x8e\x42" +
	"\x4a\x98\x5a\x79\xb5\x4e\x0e\x72\x68\xe5\x48\x40\x58\x2a\x2b\x08\x85\xd5\x7a\xda\xc5\x03\x68\x5c\xc5\xbb\x60\xee" +
	"\x33\x71\x04\xc4\xfd\xf6\xf3\x68\x64\x25\xd6\xb1\x6f\xf5\xaa\xbb\xb6\x1d\xce\xb8\x9c\x75\xa9\xaa\xf4\x5f\x25\xfe" +
	"\xaf\x69\x78\xc3\xac\xeb\xae\x74\xfe\xf6\x4e\xe8\xab\x36\xf6\xaf\x53\xdb\xfe\xad\x5f\x58\x49\x12\xe9\x77\x41\x32" +
	"\xeb\xba\xc8\x03\xaf\xb4\xb1\xe9\xab\x9b\xa7\x51\x45\xe2\x5b\x12\x09\x76\x10\xca\xf6\x3e\x7b\x9d\x67\x55\xa3\xd8" +
	"\xf4\x36\x29\x3e\x9f\xe3\xbb\x7b\xf1\x30\xe8\xe2\xb0\x43\xdb\xce\x40\xca\xbd\x3b\x03\x5e\x6a\x3b\x78\x47\xa5\x7e" +
	"\xa3\xd1\x2c\xd8\xc2\xe8\x7a\x5b\x60\x37\x7b\x7e\xc0\xa8\x97\xda\x4e\xba\xb9\xe7\x4d\x33\x99\x57\xcc\xe7\xe0\xfa" +
	"\x70\x1a\x76\xac\x20\x96\x91\x09\x03\xf7\xaf\xa8\x59\x89\xc5\x3a\x41\xb3\xda\x2d\x9c\x51\xce\xd2\x7d\x02\xe5\x4e" +
	"\x4b\x52\x51\x13\xcf\x76\x4f\x22\x19\x9e\x3f\x61\x8f\xcf\x50\x9f\xb0\x7f\x7a\xf2\xf8\x9a\xd5\x7e\x8d\x25\x94\x90" +
	"\xae\x86\x75\xbb\x5d\x15\xba\x96\x19\xd8\x9b\x16\x99\x5f\xf0\x61\x77\x25\xb1\xbd\x1f\x84\x06\x4b\x34\xab\xc5\x25" +
	"\xfb\x7a\xba\x07\xcd\xed\x1e\xbc\x1e\xd9\xa1\x67\x59\x31\x2b\xaa\xfc\xe4\xd3\x7a\x93\x7f\x28\x4b\x26\x67\x9c\x1e" +
	"\x60\xe9\xd2\x4f\x60\xb6\x93\x61\x48\x26\xc6\x63\x39\x79\x49\x26\x1f\xa1\x57\xf9\x95\x24\x59\xba\xf2\x9c\x29\x6f" +
	"\x3b\x72\xa3\xcb\x5e\xb3\xe3\xff\x80\xd4\xbe\x46\x24\x3e\x68\xfb\xb9\xf4\xd9\x7a\x52\xd9\xc5\x61\xcc\xf0\xec\x2d" +
	"\x18\x49\x90\xca\xe2\xf7\xe3\x21\x9e\x9e\xfd\x80\x34\x2b\x52\xd9\xc7\x3c\x1f\x0c\x77\xe7\x7e\xe1\xf4\x0f\x55\x91" +
	"\x19\xf6\xe6\x20\x19\x27\x30\x28\x3a\xf6\x14\x99\xc5\x41\x57\xc2\xdf\x81\xe2\x01\x88\x7d\x91\x48\x61\x7a\xc3\x25" +
	"\x78\x1c\x6a\x73\xb9\xe5\x9b\x04\xbf\x4f\xb2\xb7\xdd\x84\xa7\x03\xe9\x89\x0e\x3c\x85\xa7\xf9\x0b\x32\x5f\x7c\xde" +
	"\x9e\x0c\xcb\xb2\x77\x5c\x9c\x16\x17\xd6\xf9\x8d\xfe\x07\x40\xf5\x35\x23\x85\x34\x4d\xaf\x7f\x26\xef\x41\xba\xc8" +
	"\x1f\x18\x8c\x57\x2f\x54\x9a\xa6\xf1\x75\x4b\x3f\x03\x00\x00\xff\xff\xd6\x0d\x0f\x8b\x0f\x08\x00\x00")

func bindataTpl30collectionmethodsgotplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTpl30collectionmethodsgotpl,
		"_tpl/30_collection_methods.go.tpl",
	)
}



func bindataTpl30collectionmethodsgotpl() (*asset, error) {
	bytes, err := bindataTpl30collectionmethodsgotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "_tpl/30_collection_methods.go.tpl",
		size: 2063,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1547575483, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTpl40binarygotpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xcf\xb1\x4e\xc3\x30\x10\xc6\xf1\x19\x3f\xc5\x37\x30\xc4\x08\xf9\xde" +
	"\x01\x26\x86\x8e\x4c\x88\xc1\xb9\x5c\x53\x4b\xc9\x5d\x75\xb5\x91\xaa\x28\xef\x8e\xa0\x50\x51\xa6\x76\xf6\xdf\x9f" +
	"\xee\x47\x84\x57\x9d\xb3\x1f\x76\x79\x7a\x2a\x9a\xfd\x88\x32\xef\x27\x99\x45\xeb\x01\xa2\x6c\x43\xd1\x31\x9d\x9e" +
	"\xce\xa5\x78\x0a\xdb\xa6\x8c\x8e\x19\x0f\xcb\x72\x9f\x9e\x6d\x9a\x84\x6b\x31\x5d\xd7\xf8\x7f\xb2\x1b\x72\xcd\x78" +
	"\x7b\xef\x8f\x55\x22\xc4\xdd\x1c\x4b\xb8\x73\xa9\xcd\x15\xcc\xe9\xdc\x7f\x97\x11\x44\x78\xf9\xbd\x42\x06\x7c\x94" +
	"\x8c\xb1\xd4\x5d\xeb\x13\xdb\x4c\xa3\x8d\x46\x7b\xb7\x6a\x7d\xdb\x86\x35\x04\x22\x6c\xae\x24\x6c\xae\x03\x5c\xcc" +
	"\x75\x11\x7f\x05\x8f\x5f\x82\x93\x22\x5e\x32\x7e\x7e\x75\x11\x37\x0a\x3e\x03\x00\x00\xff\xff\x22\xed\xb8\x7c\x86" +
	"\x01\x00\x00")

func bindataTpl40binarygotplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTpl40binarygotpl,
		"_tpl/40_binary.go.tpl",
	)
}



func bindataTpl40binarygotpl() (*asset, error) {
	bytes, err := bindataTpl40binarygotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "_tpl/40_binary.go.tpl",
		size: 390,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1543131929, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTpl90testgotpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xdd\x8e\xdb\x36\x13\xbd\xa6\x9e\x62\x3e\xe1\x4b\x20\x25\x0a\x37" +
	"\x01\x8a\x00\x75\x9a\x8b\xac\xb5\x9b\x1a\xf5\xfe\x34\x5e\xa4\x05\x82\x20\xa0\xc5\xb1\x4d\x84\x26\x05\x72\xb4\xf6" +
	"\x42\xd0\xbb\x17\xa4\xe4\x9f\x24\xbb\x41\x5a\xf4\xa2\x77\x36\x39\x73\x38\x73\xce\xe1\x50\x8b\xc6\x54\x70\x83\x9e" +
	"\x2e\x71\x73\x23\xe6\x1a\x7d\x46\xf0\x84\xd0\x93\x32\x4b\x7e\x93\x43\x9b\x30\x39\x87\xd1\x6b\x90\x6b\x1d\x96\xf9" +
	"\x45\xe3\x69\x6c\x8d\xc1\x8a\xca\xd3\x8c\xf2\x84\x49\x5c\xa0\xdb\xef\x8f\xb5\xf5\x98\x51\x01\x72\x9e\x27\x09\x6b" +
	"\xdb\x8d\xa2\x15\xf0\x70\xc6\xec\xf7\x69\xd9\xac\xeb\xb7\xda\xce\xaf\x05\xad\xba\xee\xcb\xcc\x61\x7b\x6a\x85\x0c" +
	"\xf9\x69\xdb\xf2\xae\x4b\x0b\x78\xfc\x55\xc0\x55\x4d\xca\x1a\xdf\x26\x8c\xcd\x3e\xab\xba\x3c\x1d\x6b\x14\xa6\xa9" +
	"\x47\x40\xae\xc1\x22\x61\x5d\x9e\xe5\x6d\x8b\x46\x76\x5d\x92\xb0\x8a\xb6\xa1\xfe\xca\x1a\xc2\x2d\xf1\x9b\xab\xf2" +
	"\x2a\xcb\x13\x46\x73\xed\x0b\x40\xe7\xc2\xe6\xa1\xfb\x8a\xb6\xa1\x74\x5e\x9e\xe6\x09\x13\xde\xa3\x23\x7e\x69\xcf" +
	"\x9c\xb3\x2e\x14\x85\xce\x85\xae\x68\xae\x2f\xc5\x1a\x7d\xc8\x0d\x40\x7c\xc8\xce\x13\xe6\xad\x23\x3e\x23\xa7\xcc" +
	"\xd2\x67\xbb\xb8\x03\xd6\xd9\x56\x54\xa4\xef\x02\xd6\x87\x8f\x3e\x86\xb5\xd0\xb6\xcf\xc0\x09\xb3\x44\xf8\x3f\x05" +
	"\xa0\x00\x3b\x40\x42\xd7\xa5\x6d\x3b\xfc\x0b\x58\x81\x92\x10\x1f\xdb\xeb\x0a\x38\x1c\x91\xb0\xd0\xcd\x50\xd0\x7b" +
	"\xa1\x95\x14\x84\xa1\xa1\x87\x3b\x61\xb7\xc2\x41\xed\xe1\x49\xed\xb1\x91\x96\xcf\xd0\xdd\xaa\x0a\x13\x56\x7b\x78" +
	"\x0d\xc3\x62\x50\xfc\x12\x37\xc3\x5e\xf6\xbc\x80\xc7\xc3\xce\x4e\x89\xa9\x30\xcb\x11\xa4\x12\xd3\xe2\x5c\x5b\x41" +
	"\x17\x62\x5b\x62\xa5\xd6\x42\xfb\xd1\xcb\xae\x48\x18\x1b\x12\xfe\x50\xb4\xba\x11\xcb\x73\xf1\x19\xcf\x1b\x53\x65" +
	"\xe9\x06\xe7\x5e\x11\x7e\x52\x32\x2d\x20\x98\x31\x5b\x8b\xed\x14\x0d\x28\x43\x39\x64\xca\x10\xba\x85\xa8\xb0\xed" +
	"\x62\xc5\xd6\x45\x47\x32\xe6\x90\x1a\x67\xe0\x45\x01\x46\xe9\x84\xb1\x2e\xff\xde\x29\x9e\xac\xfb\xb7\xce\x08\xdc" +
	"\x8f\x1b\x4f\x76\x3d\xb6\x12\x21\xbd\x97\xa4\x81\x99\x14\x9e\x75\x5d\xc2\x82\x34\x27\x27\x10\x9c\x07\xae\x31\x40" +
	"\x2b\xeb\x11\x82\xa5\x3d\x28\x03\xb5\x70\x42\x6b\xd4\x09\xfb\xbe\x0f\x12\x46\xfc\x5d\x63\xb2\xb4\x6d\xdf\xda\xb1" +
	"\x58\xa3\xfe\xc2\x16\x9f\xce\x0c\x29\xba\xdb\xf5\xf8\xcd\x35\x66\x55\x25\xf7\x7e\x0d\xe5\xc6\xdc\x6c\x8f\x70\x3f" +
	"\x6a\xa8\x9d\x29\x33\xa3\x35\xed\x6f\x4b\x55\x49\x3e\x31\xc1\x50\x59\xce\x4f\x1b\xa5\xe5\x7b\xa1\x9b\x60\x7f\x7e" +
	"\xed\xb0\x16\xae\x77\x1d\x9c\x9c\x40\x69\xc1\x58\x82\xc6\x23\x4c\x96\xc6\x3a\xcc\x72\x20\x0b\xbe\xa9\x6b\x87\xde" +
	"\x43\x79\xda\x53\xee\x79\xc2\xee\x37\x69\x01\xe9\xa3\xa7\xb7\xe9\xce\xb0\x4c\x19\xff\xc6\x91\xf2\xc2\x84\x52\xfa" +
	"\xca\xa2\xe2\x6f\xdc\x32\x5e\xc0\x87\xe6\x51\x1f\x1a\xfb\xf1\xa8\x8f\x30\x42\x3b\x33\xd4\x58\xd1\xe9\xdd\xf5\x6f" +
	"\x59\x7e\x84\xc6\xcf\xb6\xb5\x30\xf2\x5a\x8b\x0a\x7f\xb5\x5a\xa2\x0b\x47\x24\x8c\x2d\xac\x03\x15\x92\x9f\xbf\x02" +
	"\x05\xbf\xc0\xcf\xaf\x40\x3d\x7d\xda\xfb\x06\xa3\x0e\x93\x88\x6d\x70\x93\x3d\x44\x2c\x63\x4c\x2d\x76\x9c\xd6\x9e" +
	"\x07\xbf\x96\x82\x44\xb6\x03\xc8\x5f\xc5\xdd\xff\xbd\x0e\x06\xec\xb1\x19\xf1\x48\xce\x22\x4b\x27\xe5\x9f\x1f\x1e" +
	"\xc9\x8f\x23\xe8\xe9\x51\x7b\x86\x76\xce\x0d\x3f\xc3\x00\x64\x4c\x4f\xca\xe3\x11\x3e\x5e\x61\xf5\x79\x2a\x3c\xf5" +
	"\x22\x4e\xca\x38\x6e\x23\xee\xe8\xcb\xc7\x80\x7f\xdf\x6a\x79\x76\x50\x83\xbf\xc3\xca\x3a\x99\xa5\x41\xaa\x5d\x03" +
	"\xfc\x6c\x8b\xd5\xb8\x9f\xbc\xd1\x13\x7d\xd7\xc7\x49\x1e\xa9\xa7\x74\xe0\xed\xaa\xa1\x1f\x20\xce\xd9\xcd\xd8\x36" +
	"\xe6\xe0\xc9\x83\xa4\x7c\x62\xe8\xe5\x4f\x3e\xd3\x93\x32\xe7\xf1\x31\x89\x33\x7d\x8f\x1e\xf3\x7f\xc8\x6a\xf7\xcc" +
	"\xec\x46\x05\xf0\xec\x45\x5e\xc0\xa1\x84\x20\xc5\x23\x39\x82\x77\xc3\x0a\x48\x25\xa3\xed\xd7\x82\xaa\x55\xd0\xa6" +
	"\x6f\xf0\xe8\x7a\x57\x56\x87\xaa\xfb\x6b\xce\xc7\x56\x37\x6b\xd3\xdf\xf1\x18\xa7\x16\x31\x84\x4f\x7c\xff\x92\xf4" +
	"\x73\x84\x7d\x53\xd2\x14\xcd\x92\x56\xa1\xb0\xb6\x8d\x09\xe3\x95\x70\x17\x71\xba\x2d\x69\xd5\x33\x11\x1e\x89\xc7" +
	"\x3b\x45\x78\xdb\x0e\x67\x0e\xd4\x5e\x88\xbb\x39\x5e\x3b\x75\x2b\xa8\x2f\x8b\x9f\x2b\xd4\xf2\x28\xe9\xaa\xa1\xbf" +
	"\x93\xb5\x23\xe3\x87\x53\xc0\xaf\x6c\xa3\xe5\x9e\xac\xa0\xdb\x40\xc3\x33\x40\xed\x11\xd4\x22\xb2\xb9\x63\xe4\xce" +
	"\x13\xae\xdf\xa3\xf3\xca\x1a\x94\x0f\x51\x13\x35\xfd\x07\x5d\xff\x17\x9a\x8e\x5f\x2e\x5f\xfd\xe9\xc2\x77\x4d\x72" +
	"\xb4\xd4\x25\x7f\x05\x00\x00\xff\xff\xe1\x47\x30\x9a\xbd\x09\x00\x00")

func bindataTpl90testgotplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTpl90testgotpl,
		"_tpl/90_test.go.tpl",
	)
}



func bindataTpl90testgotpl() (*asset, error) {
	bytes, err := bindataTpl90testgotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "_tpl/90_test.go.tpl",
		size: 2493,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1547706026, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTplFbs10headergotpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x31\x4e\x43\x31\x10\x05\x7b\x9f\x62\x15\xd1\xf2\xdd\x13\x51\xd0" +
	"\xd1\x81\xc4\x09\x36\xf6\xc3\x58\xf1\xdf\xfd\xac\x6d\x0a\x56\xbe\x3b\x22\x07\x48\x33\xd5\x68\x26\x46\x7a\x99\x43" +
	"\xa9\x40\x60\x3c\x90\xe9\xa7\x32\x95\x3a\xbe\xe6\x65\x4b\xba\xc7\xa4\x86\x3e\xd4\x50\x35\x1e\xd7\x12\xfb\x77\x8b" +
	"\x79\x6f\x05\x12\x82\xf0\x8e\x7e\x70\x02\xb9\x6f\xef\x9c\xae\x5c\xb0\xd6\x39\x84\x2a\xa9\xcd\x0c\x3a\xdd\x0b\x0d" +
	"\x35\x2e\x88\x32\x5b\xbb\x61\xfb\xbc\xf4\xd3\x39\x04\x77\x63\x29\xa0\x07\x3d\x46\xa7\xa7\x67\xda\x3e\x60\x95\x5b" +
	"\xfd\x85\xbd\x82\x33\xec\xed\x18\x55\xa5\xd3\xe3\x5a\xc1\xfd\xe6\xfd\x6f\xdd\x21\x79\xad\xf0\x17\x00\x00\xff\xff" +
	"\x85\x4a\x09\x56\xd4\x00\x00\x00")

func bindataTplFbs10headergotplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTplFbs10headergotpl,
		"_tpl/fbs_10_header.go.tpl",
	)
}



func bindataTplFbs10headergotpl() (*asset, error) {
	bytes, err := bindataTplFbs10headergotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "_tpl/fbs_10_header.go.tpl",
		size: 212,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1544556941, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTplFbs20messagegotpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\xb1\x4a\x03\x41\x10\x86\xeb\xdb\xa7\x98\x17\x70\xd3\x27\x95\x5e" +
	"\xd4\xce\xc6\x74\x22\x64\x34\xbf\xc7\xc2\xdc\xee\xb1\x3b\x87\xc4\x61\xde\x5d\xc2\x5a\x24\xad\xdd\x0f\xf3\xf1\x31" +
	"\xdf\x66\x43\x66\xf1\x31\x6b\xd2\xb3\x3b\x55\x2c\x15\x0d\x59\x1b\x31\xb5\x94\x27\x01\xd5\xf2\x4d\x5f\xa5\xd2\xfe" +
	"\x81\x94\x3f\x04\x74\x34\x8b\x87\xcb\x7a\xe1\x19\xee\xc7\x48\xf7\xab\x16\x9a\x90\x51\x59\x71\x8a\xa1\x73\xd7\x62" +
	"\x0b\x83\xd9\x1d\x55\xce\x13\x28\x8e\x45\xd6\x39\x37\xf7\x30\x0c\x66\xcf\x65\xe4\x19\x42\xf1\x29\x41\x4e\xee\x5b" +
	"\xb3\x57\xd4\xc4\x92\x7e\x50\x0f\xe7\x05\x14\xdd\x77\xd4\x5f\xfd\x63\xba\x0e\xf9\x32\x3d\x84\x7e\x1b\x8b\x08\x3e" +
	"\x35\x95\x7c\x9b\x32\xaf\xa2\x69\xe9\x29\xed\xdf\x2d\x37\x76\x0b\xc3\x9e\x95\xb7\x6f\x57\x91\xef\xbb\xe0\xe1\x37" +
	"\x00\x00\xff\xff\x0e\x67\xfe\xed\x51\x01\x00\x00")

func bindataTplFbs20messagegotplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTplFbs20messagegotpl,
		"_tpl/fbs_20_message.go.tpl",
	)
}



func bindataTplFbs20messagegotpl() (*asset, error) {
	bytes, err := bindataTplFbs20messagegotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "_tpl/fbs_20_message.go.tpl",
		size: 337,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1547575483, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTplProtobuf10headergotpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x31\x4b\x05\x31\x10\x84\xfb\xfb\x15\x4b\xb0\xf5\x52\xd8\xf9\xb8" +
	"\xc2\xce\x4e\xc1\x1f\x20\xfb\xee\xd6\x35\xbc\x5c\x36\x6e\xf6\x44\x0d\xf9\xef\x62\xe4\xe9\x81\x60\x13\x66\x60\xe6" +
	"\x63\xb2\xde\xc3\xcd\x66\x02\x4c\x89\x14\x8d\x16\x78\x0d\x08\x1c\xec\x79\x3b\x8e\xb3\xac\x7e\x16\xa5\x62\xa2\x14" +
	"\xc4\xe7\x13\xfb\xf2\x12\xfd\xb2\x46\xa6\x34\x94\xf7\x64\xf8\x06\x13\xb8\xac\x62\x72\xe5\x0e\x43\xc6\xf9\x84\x4c" +
	"\x50\xeb\x78\xff\x2d\x5b\x3b\x0c\x61\xcd\xa2\x06\x6e\x87\x65\x61\xf1\xbd\x76\xdc\x9e\xba\xeb\xa6\xab\xb1\x4b\xb7" +
	"\xeb\x89\x70\xa4\xdf\xb8\x85\x95\x8a\xe1\x9a\xff\x26\xff\x19\x6e\xa2\xc8\xe4\xd3\x16\x63\x7f\x7e\xca\x92\x2d\x48" +
	"\x02\x96\xc7\xf3\xfc\x09\xdc\xfe\x07\xee\x30\xd4\xaa\x98\x98\xe0\x42\xb2\x15\xb8\x9e\x60\x7c\x20\x0d\x18\xc3\x07" +
	"\xe9\x2d\xe1\x42\x7a\xd7\x29\x05\x2e\x5b\x3b\x13\x6b\xed\xf1\xaf\x13\xd4\x4a\x69\x69\x6d\xf8\x0c\x00\x00\xff\xff" +
	"\x81\xcf\xcc\x5d\x70\x01\x00\x00")

func bindataTplProtobuf10headergotplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTplProtobuf10headergotpl,
		"_tpl/protobuf_10_header.go.tpl",
	)
}



func bindataTplProtobuf10headergotpl() (*asset, error) {
	bytes, err := bindataTplProtobuf10headergotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "_tpl/protobuf_10_header.go.tpl",
		size: 368,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1544460649, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTplProtobuf20messagegotpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x41\x4b\x03\x31\x10\x85\xcf\xcd\xaf\x78\xf4\xa4\x87\xa6\x78\x2e" +
	"\x3d\xe8\x56\xc5\x8b\x14\xec\x4d\x84\xa6\xed\x74\x09\x24\x99\x25\xc9\x22\x75\x98\xff\x2e\xdb\xa5\xc8\x9e\xbd\xcd" +
	"\x83\xf7\xbe\x84\x6f\xb9\x84\x88\x7d\x4e\xd5\xd7\x8b\x2a\x32\x75\x99\x0a\xa5\x5a\xe0\x50\x7c\x6a\x03\x21\xf3\x37" +
	"\xce\x9c\xb1\x79\x42\x75\x87\x40\xd8\x8b\xd8\xdd\x70\xbd\xbb\x48\xaa\x7b\x8b\xc7\xbe\x32\x5a\x4a\x94\x5d\xa5\x93" +
	"\x35\x91\x4a\x71\x2d\x4d\xd0\x62\x66\x22\x0b\x64\x97\x5a\x82\x6d\x38\xf4\x31\x15\x55\x11\xf8\x33\xde\xca\x8b\xa7" +
	"\x70\xda\xf6\x87\xe0\x8f\xb0\xd7\x00\xd5\x61\xf2\x41\xd9\xbb\xe0\x7f\x28\xef\x2e\x1d\xc1\x0e\x28\x19\x1b\xaa\x58" +
	"\x0f\x61\xcb\x45\x15\x9f\x77\x2d\xb7\xdc\x65\xae\x6c\x8f\x7d\xa9\x1c\x93\x8b\x74\xbf\x9e\x8b\xbc\x72\xe3\x22\x05" +
	"\xdc\x66\x73\x0c\x5f\xf9\x23\x37\xd7\xfa\x8d\xff\xb5\x12\xa1\x74\x1a\x9f\x5f\x60\x3c\xd5\x98\xd1\x55\xc3\x21\xd0" +
	"\xb1\x7a\x4e\x53\x5f\xb1\x0f\xd5\x77\xa3\xaf\xf2\x0f\x61\x13\xbe\x98\x59\xa6\x8e\x86\xd2\x44\xe6\xc6\x55\x87\x35" +
	"\x1e\x56\x46\xcd\x6f\x00\x00\x00\xff\xff\xc5\x5a\x52\x54\xc3\x01\x00\x00")

func bindataTplProtobuf20messagegotplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTplProtobuf20messagegotpl,
		"_tpl/protobuf_20_message.go.tpl",
	)
}



func bindataTplProtobuf20messagegotpl() (*asset, error) {
	bytes, err := bindataTplProtobuf20messagegotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "_tpl/protobuf_20_message.go.tpl",
		size: 451,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1547650332, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"_tpl/10_tables.go.tpl":             bindataTpl10tablesgotpl,
	"_tpl/20_entity.go.tpl":             bindataTpl20entitygotpl,
	"_tpl/30_collection_methods.go.tpl": bindataTpl30collectionmethodsgotpl,
	"_tpl/40_binary.go.tpl":             bindataTpl40binarygotpl,
	"_tpl/90_test.go.tpl":               bindataTpl90testgotpl,
	"_tpl/fbs_10_header.go.tpl":         bindataTplFbs10headergotpl,
	"_tpl/fbs_20_message.go.tpl":        bindataTplFbs20messagegotpl,
	"_tpl/protobuf_10_header.go.tpl":    bindataTplProtobuf10headergotpl,
	"_tpl/protobuf_20_message.go.tpl":   bindataTplProtobuf20messagegotpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"_tpl": {Func: nil, Children: map[string]*bintree{
		"10_tables.go.tpl": {Func: bindataTpl10tablesgotpl, Children: map[string]*bintree{}},
		"20_entity.go.tpl": {Func: bindataTpl20entitygotpl, Children: map[string]*bintree{}},
		"30_collection_methods.go.tpl": {Func: bindataTpl30collectionmethodsgotpl, Children: map[string]*bintree{}},
		"40_binary.go.tpl": {Func: bindataTpl40binarygotpl, Children: map[string]*bintree{}},
		"90_test.go.tpl": {Func: bindataTpl90testgotpl, Children: map[string]*bintree{}},
		"fbs_10_header.go.tpl": {Func: bindataTplFbs10headergotpl, Children: map[string]*bintree{}},
		"fbs_20_message.go.tpl": {Func: bindataTplFbs20messagegotpl, Children: map[string]*bintree{}},
		"protobuf_10_header.go.tpl": {Func: bindataTplProtobuf10headergotpl, Children: map[string]*bintree{}},
		"protobuf_20_message.go.tpl": {Func: bindataTplProtobuf20messagegotpl, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
