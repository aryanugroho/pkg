// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: testdata/output_gen.proto

package testdata

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"

import time "time"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

func (m *CoreConfigData) Reset()         { *m = CoreConfigData{} }
func (m *CoreConfigData) String() string { return proto.CompactTextString(m) }
func (*CoreConfigData) ProtoMessage()    {}
func (*CoreConfigData) Descriptor() ([]byte, []int) {
	return fileDescriptor_output_gen_cb648a1e837c3b2f, []int{0}
}
func (m *CoreConfigData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoreConfigData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoreConfigData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CoreConfigData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoreConfigData.Merge(dst, src)
}
func (m *CoreConfigData) XXX_Size() int {
	return m.Size()
}
func (m *CoreConfigData) XXX_DiscardUnknown() {
	xxx_messageInfo_CoreConfigData.DiscardUnknown(m)
}

var xxx_messageInfo_CoreConfigData proto.InternalMessageInfo

func (m *CoreConfigDataCollection) Reset()         { *m = CoreConfigDataCollection{} }
func (m *CoreConfigDataCollection) String() string { return proto.CompactTextString(m) }
func (*CoreConfigDataCollection) ProtoMessage()    {}
func (*CoreConfigDataCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_output_gen_cb648a1e837c3b2f, []int{1}
}
func (m *CoreConfigDataCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoreConfigDataCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoreConfigDataCollection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CoreConfigDataCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoreConfigDataCollection.Merge(dst, src)
}
func (m *CoreConfigDataCollection) XXX_Size() int {
	return m.Size()
}
func (m *CoreConfigDataCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_CoreConfigDataCollection.DiscardUnknown(m)
}

var xxx_messageInfo_CoreConfigDataCollection proto.InternalMessageInfo

func (m *CustomerEntity) Reset()         { *m = CustomerEntity{} }
func (m *CustomerEntity) String() string { return proto.CompactTextString(m) }
func (*CustomerEntity) ProtoMessage()    {}
func (*CustomerEntity) Descriptor() ([]byte, []int) {
	return fileDescriptor_output_gen_cb648a1e837c3b2f, []int{2}
}
func (m *CustomerEntity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomerEntity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomerEntity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CustomerEntity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomerEntity.Merge(dst, src)
}
func (m *CustomerEntity) XXX_Size() int {
	return m.Size()
}
func (m *CustomerEntity) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomerEntity.DiscardUnknown(m)
}

var xxx_messageInfo_CustomerEntity proto.InternalMessageInfo

func (m *CustomerEntityCollection) Reset()         { *m = CustomerEntityCollection{} }
func (m *CustomerEntityCollection) String() string { return proto.CompactTextString(m) }
func (*CustomerEntityCollection) ProtoMessage()    {}
func (*CustomerEntityCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_output_gen_cb648a1e837c3b2f, []int{3}
}
func (m *CustomerEntityCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomerEntityCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomerEntityCollection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CustomerEntityCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomerEntityCollection.Merge(dst, src)
}
func (m *CustomerEntityCollection) XXX_Size() int {
	return m.Size()
}
func (m *CustomerEntityCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomerEntityCollection.DiscardUnknown(m)
}

var xxx_messageInfo_CustomerEntityCollection proto.InternalMessageInfo

func (m *DmlgenTypes) Reset()         { *m = DmlgenTypes{} }
func (m *DmlgenTypes) String() string { return proto.CompactTextString(m) }
func (*DmlgenTypes) ProtoMessage()    {}
func (*DmlgenTypes) Descriptor() ([]byte, []int) {
	return fileDescriptor_output_gen_cb648a1e837c3b2f, []int{4}
}
func (m *DmlgenTypes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DmlgenTypes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DmlgenTypes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DmlgenTypes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DmlgenTypes.Merge(dst, src)
}
func (m *DmlgenTypes) XXX_Size() int {
	return m.Size()
}
func (m *DmlgenTypes) XXX_DiscardUnknown() {
	xxx_messageInfo_DmlgenTypes.DiscardUnknown(m)
}

var xxx_messageInfo_DmlgenTypes proto.InternalMessageInfo

func (m *DmlgenTypesCollection) Reset()         { *m = DmlgenTypesCollection{} }
func (m *DmlgenTypesCollection) String() string { return proto.CompactTextString(m) }
func (*DmlgenTypesCollection) ProtoMessage()    {}
func (*DmlgenTypesCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_output_gen_cb648a1e837c3b2f, []int{5}
}
func (m *DmlgenTypesCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DmlgenTypesCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DmlgenTypesCollection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DmlgenTypesCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DmlgenTypesCollection.Merge(dst, src)
}
func (m *DmlgenTypesCollection) XXX_Size() int {
	return m.Size()
}
func (m *DmlgenTypesCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_DmlgenTypesCollection.DiscardUnknown(m)
}

var xxx_messageInfo_DmlgenTypesCollection proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CoreConfigData)(nil), "testdata.CoreConfigData")
	proto.RegisterType((*CoreConfigDataCollection)(nil), "testdata.CoreConfigDataCollection")
	proto.RegisterType((*CustomerEntity)(nil), "testdata.CustomerEntity")
	proto.RegisterType((*CustomerEntityCollection)(nil), "testdata.CustomerEntityCollection")
	proto.RegisterType((*DmlgenTypes)(nil), "testdata.DmlgenTypes")
	proto.RegisterType((*DmlgenTypesCollection)(nil), "testdata.DmlgenTypesCollection")
}
func (m *CoreConfigData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoreConfigData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ConfigID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOutputGen(dAtA, i, uint64(m.ConfigID))
	}
	if len(m.Scope) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.Scope)))
		i += copy(dAtA[i:], m.Scope)
	}
	if m.ScopeID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOutputGen(dAtA, i, uint64(m.ScopeID))
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.Expires.Size()))
	n1, err := m.Expires.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Path) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.Value.Size()))
	n2, err := m.Value.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x3a
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.VersionTs)))
	n3, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.VersionTs, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x42
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.VersionTe)))
	n4, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.VersionTe, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *CoreConfigDataCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoreConfigDataCollection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintOutputGen(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CustomerEntity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomerEntity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EntityID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOutputGen(dAtA, i, uint64(m.EntityID))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.WebsiteID.Size()))
	n5, err := m.WebsiteID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x1a
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.Email.Size()))
	n6, err := m.Email.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if m.GroupID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintOutputGen(dAtA, i, uint64(m.GroupID))
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.IncrementID.Size()))
	n7, err := m.IncrementID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x32
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.StoreID.Size()))
	n8, err := m.StoreID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x3a
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n9, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x42
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)))
	n10, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	if m.IsActive {
		dAtA[i] = 0x48
		i++
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DisableAutoGroupChange != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintOutputGen(dAtA, i, uint64(m.DisableAutoGroupChange))
	}
	dAtA[i] = 0x5a
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.CreatedIn.Size()))
	n11, err := m.CreatedIn.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x62
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.Prefix.Size()))
	n12, err := m.Prefix.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x6a
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.Firstname.Size()))
	n13, err := m.Firstname.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	dAtA[i] = 0x72
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.Middlename.Size()))
	n14, err := m.Middlename.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	dAtA[i] = 0x7a
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.Lastname.Size()))
	n15, err := m.Lastname.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	dAtA[i] = 0x82
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.Suffix.Size()))
	n16, err := m.Suffix.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	dAtA[i] = 0x8a
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.Dob.Size()))
	n17, err := m.Dob.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	dAtA[i] = 0x92
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.PasswordHash.Size()))
	n18, err := m.PasswordHash.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	dAtA[i] = 0x9a
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.RpToken.Size()))
	n19, err := m.RpToken.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	dAtA[i] = 0xa2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.RpTokenCreatedAt.Size()))
	n20, err := m.RpTokenCreatedAt.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n20
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.DefaultBilling.Size()))
	n21, err := m.DefaultBilling.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n21
	dAtA[i] = 0xb2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.DefaultShipping.Size()))
	n22, err := m.DefaultShipping.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n22
	dAtA[i] = 0xba
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.Taxvat.Size()))
	n23, err := m.Taxvat.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n23
	dAtA[i] = 0xc2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.Confirmation.Size()))
	n24, err := m.Confirmation.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n24
	dAtA[i] = 0xca
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.Gender.Size()))
	n25, err := m.Gender.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n25
	dAtA[i] = 0xd2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.FailuresNum.Size()))
	n26, err := m.FailuresNum.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n26
	dAtA[i] = 0xda
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.FirstFailure.Size()))
	n27, err := m.FirstFailure.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n27
	dAtA[i] = 0xe2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.LockExpires.Size()))
	n28, err := m.LockExpires.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n28
	return i, nil
}

func (m *CustomerEntityCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomerEntityCollection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintOutputGen(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DmlgenTypes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DmlgenTypes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOutputGen(dAtA, i, uint64(m.ID))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.ColBigint1.Size()))
	n29, err := m.ColBigint1.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n29
	if m.ColBigint2 != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOutputGen(dAtA, i, uint64(m.ColBigint2))
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.ColBigint3.Size()))
	n30, err := m.ColBigint3.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n30
	if m.ColBigint4 != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintOutputGen(dAtA, i, uint64(m.ColBigint4))
	}
	if len(m.ColBlob) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.ColBlob)))
		i += copy(dAtA[i:], m.ColBlob)
	}
	dAtA[i] = 0x3a
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.ColDate1.Size()))
	n31, err := m.ColDate1.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n31
	dAtA[i] = 0x42
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.ColDate2)))
	n32, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ColDate2, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n32
	dAtA[i] = 0x4a
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.ColDatetime1.Size()))
	n33, err := m.ColDatetime1.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n33
	dAtA[i] = 0x52
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.ColDatetime2)))
	n34, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ColDatetime2, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n34
	dAtA[i] = 0x5a
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.ColDecimal101.Size()))
	n35, err := m.ColDecimal101.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n35
	dAtA[i] = 0x62
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.ColDecimal124.Size()))
	n36, err := m.ColDecimal124.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n36
	dAtA[i] = 0x6a
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.Price124a.Size()))
	n37, err := m.Price124a.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n37
	dAtA[i] = 0x72
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.Price124b.Size()))
	n38, err := m.Price124b.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n38
	dAtA[i] = 0x7a
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.ColDecimal123.Size()))
	n39, err := m.ColDecimal123.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n39
	dAtA[i] = 0x82
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.ColDecimal206.Size()))
	n40, err := m.ColDecimal206.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n40
	dAtA[i] = 0x8a
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.ColDecimal2412.Size()))
	n41, err := m.ColDecimal2412.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n41
	dAtA[i] = 0x92
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.ColInt1.Size()))
	n42, err := m.ColInt1.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n42
	if m.ColInt2 != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOutputGen(dAtA, i, uint64(m.ColInt2))
	}
	dAtA[i] = 0xa2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.ColInt3.Size()))
	n43, err := m.ColInt3.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n43
	if m.ColInt4 != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOutputGen(dAtA, i, uint64(m.ColInt4))
	}
	dAtA[i] = 0xb2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.ColLongtext1.Size()))
	n44, err := m.ColLongtext1.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n44
	if len(m.ColLongtext2) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.ColLongtext2)))
		i += copy(dAtA[i:], m.ColLongtext2)
	}
	if len(m.ColMediumblob) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.ColMediumblob)))
		i += copy(dAtA[i:], m.ColMediumblob)
	}
	dAtA[i] = 0xca
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.ColMediumtext1.Size()))
	n45, err := m.ColMediumtext1.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n45
	if len(m.ColMediumtext2) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.ColMediumtext2)))
		i += copy(dAtA[i:], m.ColMediumtext2)
	}
	dAtA[i] = 0xda
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.ColSmallint1.Size()))
	n46, err := m.ColSmallint1.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n46
	if m.ColSmallint2 != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOutputGen(dAtA, i, uint64(m.ColSmallint2))
	}
	dAtA[i] = 0xea
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.ColSmallint3.Size()))
	n47, err := m.ColSmallint3.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n47
	if m.ColSmallint4 != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOutputGen(dAtA, i, uint64(m.ColSmallint4))
	}
	if m.HasSmallint5 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		if m.HasSmallint5 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	dAtA[i] = 0x82
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.IsSmallint5.Size()))
	n48, err := m.IsSmallint5.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n48
	dAtA[i] = 0x8a
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.ColText.Size()))
	n49, err := m.ColText.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n49
	dAtA[i] = 0x92
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.ColTimestamp1)))
	n50, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ColTimestamp1, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n50
	dAtA[i] = 0x9a
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.ColTimestamp2.Size()))
	n51, err := m.ColTimestamp2.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n51
	if m.ColTinyint1 != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintOutputGen(dAtA, i, uint64(m.ColTinyint1))
	}
	if len(m.ColVarchar1) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.ColVarchar1)))
		i += copy(dAtA[i:], m.ColVarchar1)
	}
	dAtA[i] = 0xb2
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.ColVarchar100.Size()))
	n52, err := m.ColVarchar100.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n52
	if len(m.ColVarchar16) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.ColVarchar16)))
		i += copy(dAtA[i:], m.ColVarchar16)
	}
	dAtA[i] = 0xc2
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintOutputGen(dAtA, i, uint64(m.ColChar1.Size()))
	n53, err := m.ColChar1.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n53
	if len(m.ColChar2) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintOutputGen(dAtA, i, uint64(len(m.ColChar2)))
		i += copy(dAtA[i:], m.ColChar2)
	}
	return i, nil
}

func (m *DmlgenTypesCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DmlgenTypesCollection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintOutputGen(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintOutputGen(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CoreConfigData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigID != 0 {
		n += 1 + sovOutputGen(uint64(m.ConfigID))
	}
	l = len(m.Scope)
	if l > 0 {
		n += 1 + l + sovOutputGen(uint64(l))
	}
	if m.ScopeID != 0 {
		n += 1 + sovOutputGen(uint64(m.ScopeID))
	}
	l = m.Expires.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovOutputGen(uint64(l))
	}
	l = m.Value.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.VersionTs)
	n += 1 + l + sovOutputGen(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.VersionTe)
	n += 1 + l + sovOutputGen(uint64(l))
	return n
}

func (m *CoreConfigDataCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovOutputGen(uint64(l))
		}
	}
	return n
}

func (m *CustomerEntity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EntityID != 0 {
		n += 1 + sovOutputGen(uint64(m.EntityID))
	}
	l = m.WebsiteID.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.Email.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	if m.GroupID != 0 {
		n += 1 + sovOutputGen(uint64(m.GroupID))
	}
	l = m.IncrementID.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.StoreID.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovOutputGen(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovOutputGen(uint64(l))
	if m.IsActive {
		n += 2
	}
	if m.DisableAutoGroupChange != 0 {
		n += 1 + sovOutputGen(uint64(m.DisableAutoGroupChange))
	}
	l = m.CreatedIn.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.Prefix.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.Firstname.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.Middlename.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.Lastname.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.Suffix.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.Dob.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.PasswordHash.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.RpToken.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.RpTokenCreatedAt.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.DefaultBilling.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.DefaultShipping.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.Taxvat.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.Confirmation.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.Gender.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.FailuresNum.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.FirstFailure.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.LockExpires.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	return n
}

func (m *CustomerEntityCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovOutputGen(uint64(l))
		}
	}
	return n
}

func (m *DmlgenTypes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovOutputGen(uint64(m.ID))
	}
	l = m.ColBigint1.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	if m.ColBigint2 != 0 {
		n += 1 + sovOutputGen(uint64(m.ColBigint2))
	}
	l = m.ColBigint3.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	if m.ColBigint4 != 0 {
		n += 1 + sovOutputGen(uint64(m.ColBigint4))
	}
	l = len(m.ColBlob)
	if l > 0 {
		n += 1 + l + sovOutputGen(uint64(l))
	}
	l = m.ColDate1.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ColDate2)
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.ColDatetime1.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ColDatetime2)
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.ColDecimal101.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.ColDecimal124.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.Price124a.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.Price124b.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.ColDecimal123.Size()
	n += 1 + l + sovOutputGen(uint64(l))
	l = m.ColDecimal206.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.ColDecimal2412.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.ColInt1.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	if m.ColInt2 != 0 {
		n += 2 + sovOutputGen(uint64(m.ColInt2))
	}
	l = m.ColInt3.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	if m.ColInt4 != 0 {
		n += 2 + sovOutputGen(uint64(m.ColInt4))
	}
	l = m.ColLongtext1.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = len(m.ColLongtext2)
	if l > 0 {
		n += 2 + l + sovOutputGen(uint64(l))
	}
	l = len(m.ColMediumblob)
	if l > 0 {
		n += 2 + l + sovOutputGen(uint64(l))
	}
	l = m.ColMediumtext1.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = len(m.ColMediumtext2)
	if l > 0 {
		n += 2 + l + sovOutputGen(uint64(l))
	}
	l = m.ColSmallint1.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	if m.ColSmallint2 != 0 {
		n += 2 + sovOutputGen(uint64(m.ColSmallint2))
	}
	l = m.ColSmallint3.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	if m.ColSmallint4 != 0 {
		n += 2 + sovOutputGen(uint64(m.ColSmallint4))
	}
	if m.HasSmallint5 {
		n += 3
	}
	l = m.IsSmallint5.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.ColText.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ColTimestamp1)
	n += 2 + l + sovOutputGen(uint64(l))
	l = m.ColTimestamp2.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	if m.ColTinyint1 != 0 {
		n += 2 + sovOutputGen(uint64(m.ColTinyint1))
	}
	l = len(m.ColVarchar1)
	if l > 0 {
		n += 2 + l + sovOutputGen(uint64(l))
	}
	l = m.ColVarchar100.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = len(m.ColVarchar16)
	if l > 0 {
		n += 2 + l + sovOutputGen(uint64(l))
	}
	l = m.ColChar1.Size()
	n += 2 + l + sovOutputGen(uint64(l))
	l = len(m.ColChar2)
	if l > 0 {
		n += 2 + l + sovOutputGen(uint64(l))
	}
	return n
}

func (m *DmlgenTypesCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovOutputGen(uint64(l))
		}
	}
	return n
}

func sovOutputGen(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOutputGen(x uint64) (n int) {
	return sovOutputGen(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CoreConfigData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutputGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoreConfigData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoreConfigData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigID", wireType)
			}
			m.ConfigID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scope = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeID", wireType)
			}
			m.ScopeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScopeID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Expires.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.VersionTs, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionTe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.VersionTe, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutputGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoreConfigDataCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutputGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoreConfigDataCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoreConfigDataCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &CoreConfigData{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutputGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomerEntity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutputGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomerEntity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomerEntity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			m.EntityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntityID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebsiteID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WebsiteID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Email.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncrementID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IncrementID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StoreID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableAutoGroupChange", wireType)
			}
			m.DisableAutoGroupChange = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisableAutoGroupChange |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CreatedIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Prefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Firstname", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Firstname.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Middlename", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Middlename.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lastname", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Lastname.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suffix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Suffix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dob", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Dob.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasswordHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PasswordHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RpToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpTokenCreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RpTokenCreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBilling", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultBilling.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultShipping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultShipping.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Taxvat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Taxvat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Confirmation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Gender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailuresNum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FailuresNum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstFailure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FirstFailure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockExpires", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LockExpires.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutputGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomerEntityCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutputGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomerEntityCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomerEntityCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &CustomerEntity{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutputGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DmlgenTypes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutputGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DmlgenTypes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DmlgenTypes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColBigint1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColBigint1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColBigint2", wireType)
			}
			m.ColBigint2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColBigint2 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColBigint3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColBigint3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColBigint4", wireType)
			}
			m.ColBigint4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColBigint4 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColBlob", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColBlob = append(m.ColBlob[:0], dAtA[iNdEx:postIndex]...)
			if m.ColBlob == nil {
				m.ColBlob = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColDate1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColDate1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColDate2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ColDate2, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColDatetime1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColDatetime1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColDatetime2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ColDatetime2, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColDecimal101", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColDecimal101.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColDecimal124", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColDecimal124.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price124a", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price124a.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price124b", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price124b.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColDecimal123", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColDecimal123.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColDecimal206", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColDecimal206.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColDecimal2412", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColDecimal2412.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColInt1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColInt1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColInt2", wireType)
			}
			m.ColInt2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColInt2 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColInt3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColInt3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColInt4", wireType)
			}
			m.ColInt4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColInt4 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColLongtext1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColLongtext1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColLongtext2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColLongtext2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColMediumblob", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColMediumblob = append(m.ColMediumblob[:0], dAtA[iNdEx:postIndex]...)
			if m.ColMediumblob == nil {
				m.ColMediumblob = []byte{}
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColMediumtext1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColMediumtext1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColMediumtext2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColMediumtext2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColSmallint1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColSmallint1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColSmallint2", wireType)
			}
			m.ColSmallint2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColSmallint2 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColSmallint3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColSmallint3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColSmallint4", wireType)
			}
			m.ColSmallint4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColSmallint4 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasSmallint5", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasSmallint5 = bool(v != 0)
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSmallint5", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IsSmallint5.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColText", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColText.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColTimestamp1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ColTimestamp1, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColTimestamp2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColTimestamp2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColTinyint1", wireType)
			}
			m.ColTinyint1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColTinyint1 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColVarchar1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColVarchar1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColVarchar100", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColVarchar100.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColVarchar16", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColVarchar16 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColChar1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ColChar1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColChar2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColChar2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutputGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DmlgenTypesCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutputGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DmlgenTypesCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DmlgenTypesCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutputGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &DmlgenTypes{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutputGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutputGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOutputGen(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOutputGen
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOutputGen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOutputGen
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOutputGen
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOutputGen(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOutputGen = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOutputGen   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("testdata/output_gen.proto", fileDescriptor_output_gen_cb648a1e837c3b2f)
}

var fileDescriptor_output_gen_cb648a1e837c3b2f = []byte{
	// 1932 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x58, 0xed, 0x6e, 0xdb, 0xc8,
	0x15, 0x8d, 0x6c, 0xcb, 0x96, 0x46, 0x1f, 0xb6, 0x27, 0xb1, 0x77, 0xec, 0xdd, 0x5a, 0xae, 0xdb,
	0xee, 0x3a, 0x45, 0x6b, 0x8b, 0x94, 0x62, 0xa4, 0x8b, 0x6d, 0xb1, 0x91, 0x94, 0x0f, 0xa2, 0x71,
	0x60, 0x8c, 0x9d, 0x14, 0x58, 0xa0, 0x20, 0x28, 0x72, 0x2c, 0x11, 0xa1, 0x48, 0x82, 0x1c, 0x79,
	0x9d, 0x87, 0x28, 0xb0, 0x8f, 0xb2, 0x8f, 0x91, 0x9f, 0x7d, 0x02, 0xb7, 0x75, 0x5e, 0xa4, 0x98,
	0x3b, 0x43, 0x8a, 0x94, 0x18, 0x27, 0xf9, 0x63, 0xcc, 0x1d, 0x9e, 0x73, 0xe6, 0xe3, 0xde, 0x99,
	0x33, 0x32, 0xda, 0xe1, 0x2c, 0xe6, 0x8e, 0xc5, 0xad, 0xe3, 0x60, 0xca, 0xc3, 0x29, 0x37, 0x47,
	0xcc, 0x3f, 0x0a, 0xa3, 0x80, 0x07, 0xb8, 0x92, 0x7c, 0xda, 0xfd, 0xf3, 0xc8, 0xe5, 0xe3, 0xe9,
	0xf0, 0xc8, 0x0e, 0x26, 0xc7, 0xa3, 0x60, 0x14, 0x1c, 0x03, 0x60, 0x38, 0xbd, 0x84, 0x08, 0x02,
	0x68, 0x49, 0xe2, 0x6e, 0x6b, 0x14, 0x04, 0x23, 0x8f, 0xcd, 0x50, 0xdc, 0x9d, 0xb0, 0x98, 0x5b,
	0x93, 0x50, 0x01, 0xf4, 0x8c, 0x9e, 0x1d, 0x44, 0x2c, 0xe6, 0x41, 0xc4, 0xdc, 0xe0, 0x38, 0x7c,
	0x3b, 0x3a, 0x16, 0x6d, 0x6b, 0xc4, 0x8e, 0xfd, 0xa9, 0xe7, 0xc1, 0x1f, 0xc9, 0x39, 0xf8, 0x75,
	0x19, 0x35, 0xfb, 0x41, 0xc4, 0xfa, 0x81, 0x7f, 0xe9, 0x8e, 0x06, 0x16, 0xb7, 0xf0, 0x43, 0x54,
	0xb5, 0x21, 0x32, 0x5d, 0x87, 0x94, 0xf6, 0x4b, 0x87, 0x8d, 0x5e, 0xfd, 0xf6, 0xa6, 0x55, 0x91,
	0x10, 0x63, 0x40, 0x2b, 0xf2, 0xb3, 0xe1, 0xe0, 0x16, 0x2a, 0xc7, 0x76, 0x10, 0x32, 0xb2, 0xb4,
	0x5f, 0x3a, 0xac, 0xf6, 0xaa, 0xb7, 0x37, 0xad, 0xf2, 0xb9, 0xe8, 0xa0, 0xb2, 0x1f, 0x7f, 0x8b,
	0x2a, 0xd0, 0x10, 0x52, 0xcb, 0xfb, 0xa5, 0xc3, 0x72, 0xaf, 0x76, 0x7b, 0xd3, 0x5a, 0x03, 0x8c,
	0x31, 0xa0, 0x6b, 0xf0, 0xd1, 0x70, 0xf0, 0x23, 0xb4, 0xc6, 0xae, 0x43, 0x37, 0x62, 0x31, 0x59,
	0xd9, 0x2f, 0x1d, 0xd6, 0x74, 0x74, 0x04, 0x93, 0xbc, 0x70, 0x27, 0xac, 0xb7, 0xfe, 0xfe, 0xa6,
	0x75, 0x4f, 0xd0, 0x9e, 0x4a, 0x08, 0x4d, 0xb0, 0xf8, 0x1b, 0xb4, 0x12, 0x5a, 0x7c, 0x4c, 0xca,
	0x30, 0x7c, 0xe5, 0xf6, 0xa6, 0xb5, 0x72, 0x66, 0xf1, 0x31, 0x85, 0x5e, 0xac, 0xa1, 0xf2, 0x95,
	0xe5, 0x4d, 0x19, 0x59, 0x05, 0xc9, 0xba, 0x94, 0x3c, 0xe7, 0x91, 0xeb, 0x8f, 0x7a, 0x0d, 0x25,
	0x5a, 0x7e, 0x23, 0x20, 0x54, 0x22, 0xf1, 0x19, 0x42, 0x57, 0x2c, 0x8a, 0xdd, 0xc0, 0x37, 0x79,
	0x4c, 0xd6, 0x80, 0xb7, 0x7b, 0x24, 0x37, 0xfe, 0x28, 0xd9, 0x78, 0x98, 0x15, 0x6c, 0x7c, 0x6f,
	0x4b, 0xa9, 0x54, 0xdf, 0x48, 0xd6, 0x45, 0xfc, 0xcb, 0x7f, 0x5a, 0x25, 0x5a, 0xbd, 0x4a, 0xc2,
	0x9c, 0x22, 0x23, 0x95, 0x2f, 0x57, 0x64, 0x79, 0x45, 0x76, 0xf0, 0x02, 0x91, 0x7c, 0xc6, 0xfa,
	0x81, 0xe7, 0x31, 0x9b, 0xbb, 0x81, 0x8f, 0xff, 0x84, 0x56, 0x44, 0x0f, 0x29, 0xed, 0x2f, 0x1f,
	0xd6, 0x74, 0x72, 0x94, 0xd4, 0xda, 0x51, 0x9e, 0x41, 0x01, 0x75, 0xf0, 0xaf, 0x26, 0x6a, 0xf6,
	0xa7, 0x31, 0x0f, 0x26, 0x2c, 0x7a, 0xea, 0x73, 0x97, 0xbf, 0x13, 0xc9, 0x67, 0xd0, 0x9a, 0x4b,
	0xbe, 0xfc, 0x2c, 0x92, 0x2f, 0x3f, 0x1b, 0x0e, 0xfe, 0x1b, 0x42, 0x3f, 0xb3, 0x61, 0xec, 0x72,
	0xc8, 0xee, 0x52, 0x76, 0x8f, 0x5f, 0xbb, 0x3e, 0xef, 0xe8, 0xbd, 0xcd, 0x64, 0x2d, 0xff, 0x90,
	0x38, 0x63, 0x40, 0xab, 0x8a, 0x62, 0x38, 0x22, 0x3d, 0x6c, 0x62, 0xb9, 0x1e, 0x14, 0xc6, 0x47,
	0xd3, 0xf3, 0x54, 0x40, 0xa8, 0x44, 0x8a, 0x72, 0x1a, 0x45, 0xc1, 0x34, 0x14, 0x03, 0xae, 0xc0,
	0xe4, 0xa0, 0x9c, 0x9e, 0x8b, 0x3e, 0x51, 0x4e, 0xf0, 0xd1, 0x70, 0xf0, 0x00, 0xd5, 0x5d, 0xdf,
	0x8e, 0xd8, 0x84, 0xf9, 0x5c, 0x60, 0xcb, 0x05, 0x23, 0xdc, 0x57, 0x23, 0xd4, 0x8c, 0x04, 0x69,
	0x0c, 0x68, 0x2d, 0xa5, 0x19, 0x0e, 0x7e, 0x8c, 0x2a, 0x70, 0x84, 0x84, 0xc2, 0x6a, 0xc1, 0xf2,
	0xd2, 0xba, 0x3c, 0x17, 0x28, 0x28, 0x67, 0x68, 0x38, 0x22, 0xe9, 0x76, 0xc4, 0x2c, 0xce, 0x1c,
	0xd3, 0xe2, 0x5f, 0x52, 0x46, 0x7d, 0xc9, 0x7a, 0xc2, 0x65, 0xd2, 0xed, 0x24, 0x14, 0x8a, 0xd3,
	0xd0, 0x49, 0x14, 0xbf, 0xa0, 0x8c, 0x5e, 0x4b, 0x56, 0xa2, 0x38, 0x4d, 0x42, 0x91, 0x69, 0x37,
	0x36, 0x2d, 0x9b, 0xbb, 0x57, 0x8c, 0x54, 0xf7, 0x4b, 0x87, 0x15, 0x99, 0x69, 0x23, 0x7e, 0x02,
	0x7d, 0xb4, 0xe2, 0xaa, 0x16, 0x7e, 0x8d, 0x76, 0x1c, 0x37, 0xb6, 0x86, 0x1e, 0x33, 0xad, 0x29,
	0x0f, 0x4c, 0x99, 0x03, 0x7b, 0x6c, 0xf9, 0x23, 0x46, 0x10, 0xe4, 0x61, 0xf7, 0xf6, 0xa6, 0xb5,
	0x3d, 0x90, 0xa0, 0x27, 0x53, 0x1e, 0x40, 0x4a, 0xfa, 0x80, 0xa0, 0xdb, 0x4e, 0x61, 0xbf, 0x28,
	0xa0, 0x64, 0x97, 0x5c, 0x9f, 0xd4, 0x0a, 0x72, 0xb4, 0x39, 0xb7, 0x2f, 0x86, 0x9f, 0xee, 0x89,
	0xe1, 0xe3, 0x2e, 0x5a, 0x0d, 0x23, 0x76, 0xe9, 0x5e, 0x93, 0x7a, 0x01, 0xb7, 0xa9, 0xb8, 0xab,
	0x67, 0x80, 0xa1, 0x0a, 0x8b, 0xff, 0x8a, 0xaa, 0x97, 0x6e, 0x14, 0x73, 0xdf, 0x9a, 0x30, 0xd2,
	0xb8, 0x6b, 0xd0, 0x67, 0x09, 0x8c, 0xce, 0x18, 0xf8, 0x47, 0x84, 0x26, 0xae, 0xe3, 0x78, 0x0c,
	0xf8, 0xcd, 0x02, 0x3e, 0x56, 0x7c, 0x74, 0x9a, 0xe2, 0x68, 0x86, 0x83, 0xbf, 0x47, 0x15, 0xcf,
	0x52, 0xe3, 0xaf, 0x17, 0xf0, 0x37, 0x14, 0xbf, 0xf2, 0x52, 0xa1, 0x68, 0x8a, 0x17, 0x4b, 0x8e,
	0xa7, 0x97, 0x62, 0xc9, 0x1b, 0x77, 0x2d, 0xf9, 0x1c, 0x30, 0x54, 0x61, 0xf1, 0x43, 0xb4, 0xec,
	0x04, 0x43, 0xb2, 0xb9, 0x70, 0xb3, 0xd6, 0x14, 0x61, 0x79, 0x10, 0x0c, 0xa9, 0xc0, 0xe0, 0xe7,
	0xa8, 0x11, 0x5a, 0x71, 0xfc, 0x73, 0x10, 0x39, 0xe6, 0xd8, 0x8a, 0xc7, 0x04, 0x17, 0x8c, 0xf3,
	0x40, 0xd1, 0xea, 0x67, 0x0a, 0xfa, 0xc2, 0x8a, 0xc7, 0xb4, 0x1e, 0x66, 0x22, 0x71, 0x78, 0xa2,
	0xd0, 0xe4, 0xc1, 0x5b, 0xe6, 0x93, 0xfb, 0x05, 0x1a, 0xe9, 0xe1, 0xa1, 0xe1, 0x85, 0x00, 0xd1,
	0xb5, 0x48, 0x36, 0xf0, 0x39, 0xba, 0x9f, 0x30, 0xcd, 0xcc, 0x29, 0x7a, 0xb0, 0x30, 0x7b, 0xa2,
	0x24, 0x36, 0x94, 0x44, 0x7a, 0x78, 0xe8, 0x46, 0x34, 0xd7, 0x83, 0x4f, 0xd1, 0xba, 0xc3, 0x2e,
	0xad, 0xa9, 0xc7, 0xcd, 0xa1, 0xeb, 0x79, 0xae, 0x3f, 0x22, 0x5b, 0x05, 0x47, 0x7a, 0x5b, 0x49,
	0x36, 0x07, 0x12, 0xdc, 0x93, 0x58, 0xda, 0x74, 0x72, 0x31, 0x3e, 0x43, 0x1b, 0x89, 0x5c, 0x3c,
	0x76, 0xc3, 0x50, 0xe8, 0x6d, 0x17, 0xe8, 0x7d, 0xa5, 0xf4, 0xd6, 0x95, 0xde, 0xb9, 0x02, 0xd3,
	0x64, 0x36, 0x49, 0x87, 0xc8, 0x2c, 0xb7, 0xae, 0xaf, 0x2c, 0x4e, 0xbe, 0xba, 0x2b, 0xb3, 0x17,
	0x80, 0xa1, 0x0a, 0x8b, 0x9f, 0xa1, 0x3a, 0x98, 0x71, 0x34, 0xb1, 0xc4, 0xfd, 0x4f, 0xc8, 0x5d,
	0xd9, 0xea, 0x67, 0x90, 0x34, 0xc7, 0x13, 0xa3, 0x8f, 0x98, 0xef, 0xb0, 0x88, 0xec, 0x14, 0xac,
	0x22, 0x1d, 0xfd, 0x39, 0x60, 0xa8, 0xc2, 0xe2, 0x3e, 0xaa, 0x5f, 0x5a, 0xae, 0x37, 0x8d, 0x58,
	0x6c, 0xfa, 0xd3, 0x09, 0xd9, 0x05, 0x6e, 0x4d, 0x72, 0x0d, 0xa0, 0xa6, 0xb7, 0xec, 0x33, 0x05,
	0x7c, 0x35, 0x9d, 0xd0, 0xda, 0xe5, 0x2c, 0xc0, 0x4f, 0x51, 0x03, 0x4e, 0x97, 0xa9, 0x3a, 0xc9,
	0xd7, 0x0b, 0x89, 0x4e, 0x57, 0x00, 0x27, 0x52, 0x29, 0xd1, 0xfa, 0x65, 0x26, 0xc2, 0x3d, 0x54,
	0xf7, 0x02, 0xfb, 0xad, 0x99, 0x3c, 0x23, 0xbe, 0x59, 0x50, 0x49, 0xa7, 0xf2, 0x32, 0xb0, 0xdf,
	0x26, 0x4f, 0x89, 0x9a, 0x37, 0x0b, 0xc0, 0x59, 0x73, 0x76, 0xf8, 0x59, 0xce, 0x9a, 0x63, 0x28,
	0x67, 0x7d, 0xff, 0x00, 0xd5, 0x06, 0x13, 0x6f, 0xc4, 0xfc, 0x8b, 0x77, 0x21, 0x8b, 0xf1, 0x36,
	0x5a, 0x52, 0x7e, 0x5a, 0xee, 0xad, 0xde, 0xde, 0xb4, 0x96, 0x8c, 0x01, 0x5d, 0x72, 0x1d, 0xfc,
	0x44, 0xe4, 0xcf, 0x33, 0x87, 0xee, 0xc8, 0xf5, 0xb9, 0xa9, 0x29, 0x17, 0x9d, 0xed, 0xe0, 0x49,
	0x77, 0x76, 0x9d, 0xf4, 0x03, 0xaf, 0x07, 0x38, 0x8d, 0x22, 0x3b, 0x6d, 0xe3, 0x76, 0x4e, 0x42,
	0x07, 0x37, 0x5d, 0xee, 0x35, 0x73, 0x0c, 0x3d, 0xc3, 0xd0, 0xc5, 0x56, 0x65, 0x18, 0x1d, 0xf5,
	0xe2, 0xca, 0xa4, 0xbc, 0x70, 0xd4, 0x4e, 0x46, 0xa3, 0x33, 0x37, 0x6a, 0x17, 0x1c, 0x76, 0x65,
	0x6e, 0xd4, 0x6e, 0x86, 0xd1, 0x15, 0xde, 0x0d, 0x0c, 0x2f, 0x18, 0x82, 0x9b, 0xd6, 0xa5, 0x77,
	0x0b, 0xb4, 0x17, 0x0c, 0xe9, 0x9a, 0x2d, 0x1b, 0xf8, 0x7b, 0x24, 0x58, 0xa6, 0xb0, 0x29, 0x53,
	0x53, 0xde, 0x99, 0x4d, 0x63, 0x7a, 0x3d, 0xf6, 0x03, 0x6f, 0x60, 0x71, 0xa6, 0x89, 0xf7, 0xa8,
	0x6c, 0xe1, 0x57, 0x19, 0xae, 0xfe, 0x19, 0x2e, 0xf9, 0x60, 0x4e, 0x4b, 0x07, 0x93, 0x4c, 0xf4,
	0x74, 0xfc, 0x0c, 0x35, 0x13, 0x3d, 0xf1, 0xd8, 0x36, 0x35, 0x30, 0xca, 0x8f, 0x14, 0xa7, 0xd2,
	0x10, 0x40, 0x4d, 0x1c, 0xaf, 0x59, 0x84, 0x7f, 0x9a, 0xd3, 0xd1, 0xc1, 0x35, 0xef, 0x9e, 0x1b,
	0x29, 0xd0, 0x95, 0xf3, 0xcb, 0x6a, 0xeb, 0xf8, 0x14, 0x6d, 0x80, 0x36, 0xb3, 0xdd, 0x89, 0xe5,
	0x99, 0x5a, 0xdb, 0xd4, 0x94, 0x97, 0x36, 0xe4, 0x2c, 0x07, 0xf2, 0x4b, 0xfa, 0x24, 0x68, 0x08,
	0x41, 0xd9, 0xa7, 0xb5, 0x35, 0xda, 0xb0, 0xb3, 0xe1, 0x82, 0x9c, 0x6e, 0x76, 0x95, 0xbd, 0x7e,
	0x86, 0x9c, 0xde, 0xcd, 0xc9, 0xe9, 0x5d, 0xfc, 0x23, 0xaa, 0x85, 0x91, 0x6b, 0x33, 0x10, 0xb2,
	0x94, 0xdf, 0xce, 0x29, 0xa5, 0x86, 0x7b, 0x26, 0x90, 0x9a, 0xde, 0xb5, 0x68, 0x35, 0x4c, 0x9a,
	0x79, 0x85, 0xa1, 0x72, 0xdc, 0x4f, 0x29, 0x0c, 0x67, 0x0a, 0xc3, 0x82, 0x25, 0x75, 0x94, 0xf1,
	0x7e, 0xce, 0x92, 0x3a, 0xf9, 0x25, 0x75, 0xe6, 0xe5, 0xf4, 0xb6, 0x79, 0xa2, 0xdc, 0xf8, 0xd3,
	0x72, 0x7a, 0xfb, 0x24, 0x2b, 0xa7, 0xb7, 0x4f, 0xf0, 0x19, 0xda, 0xcc, 0xc9, 0x75, 0x4d, 0x4d,
	0x57, 0x56, 0x3d, 0xa7, 0x97, 0x9a, 0x53, 0x46, 0xaf, 0xab, 0xe9, 0xb4, 0x69, 0xe7, 0x62, 0xfc,
	0x58, 0xfc, 0x80, 0xf3, 0x4c, 0x79, 0xa3, 0xe0, 0xc5, 0x3b, 0x39, 0xb5, 0xde, 0x7e, 0xe0, 0x19,
	0xe2, 0x3a, 0x11, 0x67, 0x4f, 0x34, 0xf0, 0x77, 0x33, 0xa6, 0x0e, 0xae, 0x5d, 0x4e, 0x0f, 0xa9,
	0x21, 0x6e, 0x11, 0x05, 0xd4, 0xf1, 0x5f, 0x66, 0xc0, 0x8e, 0x72, 0xe6, 0x8f, 0xbc, 0x8d, 0x25,
	0xb5, 0x93, 0x50, 0x3b, 0xd9, 0x31, 0xba, 0xe0, 0xc1, 0x8d, 0xec, 0x18, 0xdd, 0x04, 0xd8, 0xc5,
	0x2f, 0xe4, 0xa1, 0xf1, 0x02, 0x7f, 0xc4, 0xd9, 0xb5, 0x58, 0xcb, 0xf6, 0xdd, 0xee, 0xe6, 0xbd,
	0x54, 0x50, 0x79, 0xfc, 0xd2, 0x08, 0x9f, 0xcc, 0x29, 0xe9, 0xe0, 0xb1, 0xd5, 0xde, 0xc6, 0x1c,
	0x4f, 0xcf, 0xf1, 0xc4, 0x46, 0x02, 0x6f, 0xc2, 0x1c, 0x77, 0x3a, 0x81, 0x8b, 0x8b, 0xc0, 0xc5,
	0xb5, 0xa9, 0x92, 0x7a, 0x9a, 0x7e, 0x80, 0xa4, 0xce, 0x42, 0xfc, 0x4a, 0xd6, 0x88, 0x64, 0xaa,
	0xd9, 0xef, 0x14, 0xcc, 0x3e, 0x9b, 0xd2, 0xd3, 0x14, 0xac, 0x41, 0x4a, 0x33, 0x31, 0xfe, 0x61,
	0x41, 0x4f, 0x07, 0xb7, 0xad, 0xf6, 0xf0, 0x02, 0x5b, 0x9f, 0x63, 0xeb, 0xf8, 0xb9, 0x5c, 0x47,
	0x3c, 0xb1, 0xc4, 0xeb, 0x45, 0xcc, 0xe5, 0xeb, 0xc5, 0xaa, 0xc8, 0x6e, 0xe4, 0xb9, 0x42, 0xca,
	0x8d, 0x4c, 0xa3, 0x64, 0x23, 0x53, 0x21, 0x1d, 0x6c, 0xb6, 0x9c, 0x6e, 0x64, 0x82, 0xd4, 0x73,
	0x3c, 0x3d, 0x49, 0x65, 0xca, 0xeb, 0x90, 0xdf, 0x14, 0xd4, 0x4c, 0xd1, 0x0c, 0x3a, 0x39, 0xa5,
	0xce, 0xc2, 0x0c, 0xba, 0x64, 0x0f, 0x4a, 0x68, 0x7e, 0x06, 0xdd, 0x1c, 0xaf, 0x2b, 0x78, 0x63,
	0x2b, 0x9e, 0xf1, 0x1e, 0x91, 0x16, 0xfc, 0xe4, 0x01, 0xde, 0x0b, 0x2b, 0x4e, 0x90, 0x8f, 0x68,
	0x7d, 0x9c, 0x89, 0x70, 0x1f, 0x35, 0xdc, 0x1c, 0x6d, 0x3f, 0x6b, 0x00, 0xbd, 0x20, 0xf0, 0x32,
	0x3f, 0x24, 0x33, 0x2a, 0x35, 0x37, 0x23, 0xf2, 0x58, 0x5a, 0x9f, 0x48, 0x06, 0xf9, 0xed, 0x5d,
	0x6f, 0xe1, 0x7e, 0xe0, 0x5d, 0xb0, 0x6b, 0x0e, 0x67, 0x40, 0x34, 0xf0, 0x3f, 0xd1, 0x3a, 0x30,
	0x13, 0x57, 0x30, 0x35, 0x72, 0xf0, 0x49, 0xe7, 0xd8, 0xc9, 0xdc, 0x3b, 0x69, 0xaf, 0x06, 0xd6,
	0x21, 0xca, 0x74, 0xd6, 0x85, 0x8d, 0x79, 0x79, 0x9d, 0xfc, 0x6e, 0xc1, 0xe0, 0xb6, 0x8a, 0xe4,
	0xf4, 0xbc, 0x94, 0x8e, 0x3b, 0xa8, 0x21, 0xa5, 0xfc, 0x77, 0xb2, 0xc4, 0x7e, 0x0f, 0x95, 0xb1,
	0x2e, 0x36, 0x06, 0x88, 0xd0, 0xaf, 0xd1, 0x9a, 0x3d, 0x0b, 0x12, 0xd2, 0x95, 0x15, 0xd9, 0x63,
	0x2b, 0x32, 0x35, 0xf2, 0x07, 0xa8, 0xe9, 0x84, 0xf4, 0x46, 0xf6, 0x4b, 0x52, 0x12, 0xe0, 0xbf,
	0xcb, 0x49, 0xa7, 0xa4, 0x76, 0x9b, 0x7c, 0x5b, 0xb0, 0xa9, 0xd9, 0x69, 0x27, 0xdc, 0x76, 0x1b,
	0xa6, 0x3d, 0x0b, 0x93, 0x7a, 0x4a, 0xc5, 0x4e, 0xc8, 0x77, 0xb9, 0xab, 0x21, 0x81, 0x9e, 0x40,
	0x3d, 0xa5, 0x11, 0xfe, 0x41, 0xbe, 0x34, 0xd4, 0xb4, 0x0f, 0xef, 0xfa, 0x19, 0xd7, 0x0f, 0xbc,
	0x3e, 0xac, 0x42, 0x14, 0x01, 0xb4, 0xf0, 0x1f, 0x33, 0x6c, 0x9d, 0x3c, 0x84, 0x11, 0xeb, 0x19,
	0xac, 0x9e, 0x62, 0xf5, 0x83, 0x1e, 0xda, 0xca, 0xbc, 0x24, 0x33, 0x2f, 0xd2, 0x87, 0xb9, 0x17,
	0xe9, 0xd6, 0xec, 0x45, 0x9a, 0x81, 0xcb, 0xe7, 0x68, 0xef, 0xe0, 0xfd, 0xff, 0xf6, 0xee, 0xbd,
	0xbf, 0xdd, 0x2b, 0xfd, 0xfb, 0x76, 0xaf, 0xf4, 0xdf, 0xdb, 0xbd, 0xd2, 0x2f, 0x1f, 0xf6, 0xee,
	0xfd, 0xfa, 0x61, 0xef, 0xde, 0x4f, 0xe9, 0x7f, 0x23, 0x87, 0xab, 0x50, 0x49, 0x9d, 0xff, 0x07,
	0x00, 0x00, 0xff, 0xff, 0x44, 0x9c, 0x0b, 0x0e, 0xbb, 0x14, 0x00, 0x00,
}
